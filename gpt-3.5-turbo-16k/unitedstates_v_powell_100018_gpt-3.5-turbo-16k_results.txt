Sentence 1: Case Name: 'UNITED STATES of America, Plaintiff-Appellee, v. Albert POWELL, III, Defendant-Appellant'
Label: No Factor

Sentence 2: Citation: "277 F. App'x 782", Court Name: 'United States Court of Appeals for the Tenth Circuit'
Label: No Factor

Sentence 3: Decision Date YYYY-MM-DD: '2008-05-07'
Label: No Factor

Sentence 4: ID No. : 4077446, 'ORDER AND JUDGMENT
Label: No Factor

Sentence 5: NEIL M. GORSUCH, Circuit Judge.
Label: No Factor

Sentence 6: Albert Powell challenges the district court’s denial of his motion to suppress drugs found in a search of his vehicle.
Label: No Factor

Sentence 7: Specifically, Mr. Powell argues that his traffic stop should have ended after a sheriffs deputy issued him a warning citation and that his further detention for questioning was unlawful.
Label: No Factor

Sentence 8: Like the district court, however, we hold that reasonable suspicion of criminal activity sufficient to support a lawful investigative detention existed at the time the initial traffic stop ended; accordingly, we affirm.
Label: Suspicion Found

Sentence 9: While patrolling Interstate 70 in Kansas late one morning in May 2006, Shawnee County Sheriffs Deputy Tracey Trammel observed an eastbound white GMC Yukon cross over the fog line on two separate occasions within a quarter of a mile.
Label: No Factor

Sentence 10: Other vehicles were not having difficulty remaining on the road, and no road, weather, or traffic conditions explained the weaving, so Deputy Trammel stopped the Yukon.
Label: No Factor

Sentence 11: Deputy Trammel approached the vehicle on the passenger side and explained to Mr. Powell, the driver and sole occupant, why he stopped him and asked if he was tired or had been drinking.
Label: No Factor

Sentence 12: Mr. Powell responded in the negative and then, without any prompting from the deputy, began volunteering information.
Label: No Factor

Sentence 13: Mr. Powell told Deputy Trammel that he rented the Yukon to move from Colorado to Lexington, Kentucky, where he planned to open a hip-hop clothing store.
Label: Unusual Travel Plans

Sentence 14: He explained that he was transporting tires for his Chevy Suburban, which he owned but left at home in Colorado, because the tires were not made for long distance highway driving.
Label: No Factor

Sentence 15: He added that he planned to unload the tires in Lexington before returning to Colorado to turn in his rental vehicle and pick up his Suburban.
Label: No Factor

Sentence 16: Mr. Powell went on to say that he was traveling with his brother, who was “up ahead” because he did not wait for Mr. Powell when Mr. Powell stopped to use the restroom.
Label: No Factor

Sentence 17: During Mr. Powell’s narrative, Deputy Trammel observed that Mr. Powell appeared “extremely nervous” because, in addition to his talkativeness, he was breathing heavily and avoiding eye contact.
Label: Nervous Behavior or Appearance

Sentence 18: The deputy also detected a “[r]eal strong-deodorizer smell,” specifically the smell of fabric softener, which he later testified is often used to mask the odor of illegal drugs.
Label: Masking Agent

Sentence 19: Appellee’s Supp. App. at 17, 21.
Label: No Factor

Sentence 20: He further observed that the Yukon was “probably half full,” containing four large tires and several boxes.
Label: No Factor

Sentence 21: Id. at 18-19.
Label: No Factor

Sentence 22: After Mr. Powell explained his travel plans, Deputy Trammel requested his license and rental agreement, which Mr. Powell produced and Deputy Trammel took to his patrol car.
Label: Motorist license or Identification

Sentence 23: The rental agreement showed that Mr. Powell rented the Yukon the day before and was supposed to return it three days after the rental date.
Label: No Factor

Sentence 24: Although there was some confusion about the status of Mr. Powell’s license, dispatch ultimately informed Deputy Trammel that it was expired or canceled.
Label: Motorist license or Identification

Sentence 25: Deputy Trammel again approached Mr. Powell’s vehicle on the passenger side, returned his license and rental agreement, and issued him a warning citation for the lane violation.
Label: No Factor

Sentence 26: The deputy thanked Mr. Powell and appeared ready to return to his patrol car, but then paused briefly and inquired if he could ask a few additional questions.
Label: No Factor

Sentence 27: Before the district court, Deputy Trammel and Mr. Powell disputed whether Mr. Powell agreed.
Label: No Factor

Sentence 28: But they do agree that Deputy Trammel went on to ask if Mr. Powell was transporting anything illegal such as marijuana, heroin, cocaine, or weapons.
Label: Suspicious or Inconsistent Answers

Sentence 29: Looking at the floor, Mr. Powell answered that he was not.
Label: Suspicious or Inconsistent Answers

Sentence 30: Deputy Trammel then sought permission to search the vehicle, but Mr. Powell refused.
Label: Refused Consent

Sentence 31: Believing he already had reasonable suspicion to detain Mr. Powell for a canine sniff of his vehicle, Deputy Trammel asked Mr. Powell to exit the vehicle and walked the drug detection dog traveling in his patrol car around the Yukon’s perimeter.
Label: No Factor

Sentence 32: The dog alerted, and Deputy Trammel explained to Mr. Powell that this gave him reason to look inside the vehicle.
Label: No Factor

Sentence 33: Upon searching the Yukon, Deputy Trammel found marijuana in a box labeled “AP bedroom,” which was emitting a strong deodorizer odor.
Label: Vehicle Contents Suggest Drugs

Sentence 34: Ultimately, the government charged Mr. Powell with possessing with intent to distribute approximately 119 kilograms of a mixture or substance containing marijuana in violation of 21 U.S.C. § 841(a)(1) and (b)(1)(B).
Label: Legal Indications of Drug Use

Sentence 35: Mr. Powell moved to suppress the drugs found as a result of the search, arguing that his initial stop and later detention were illegal.
Label: No Factor

Sentence 36: The district court concluded that both the initial stop for a traffic infraction and the detention that occurred after the initial stop ended were based on reasonable suspicion and therefore denied the motion to suppress.
Label: No Factor

Sentence 37: After this ruling, Mr. Powell entered a conditional guilty plea, reserving the right to appeal the suppression order.
Label: No Factor

Sentence 38: On appeal, Mr. Powell does not contest the legality of the initial traffic stop for lane violations, so the only issue before us is whether his continued detention for additional questioning and a canine sniff of his vehicle, after the traffic stop ended, complied with the Fourth Amendment.
Label: No Factor

Sentence 39: We approach this question, as in all appeals from a district court’s order on a motion to suppress, viewing the record evidence in the light most favorable to the district court’s ruling and accepting its factual findings unless clearly erroneous, though we assess de novo the ultimate legal question whether the seizure was reasonable under the Fourth Amendment.
Label: No Factor

Sentence 40: United States v. Cortez-Galaviz, 495 F.3d 1203,1205 (10th Cir.2007).
Label: No Factor

Sentence 1: A routine traffic stop effects an investigative detention, which generally must “last no longer than is necessary to effectuate the purpose of the stop,” and the scope of which “must be carefully tailored to its underlying justification.”
Label: No Factor

Sentence 2: Florida v. Roger, 460 U.S. 491, 500, 103 S.Ct. 1319, 75 L.Ed.2d 229 (1983); see United States v. Hunnicutt, 135 F.3d 1345, 1348 (10th Cir.1998).
Label: No Factor

Sentence 3: To extend the detention beyond the initial stop, an officer must have objectively reasonable and articulable suspicion that illegal activity is afoot, or the initial detention must have become a consensual encounter.
Label: No Factor

Sentence 4: Hunnicutt, 135 F.3d at 1349.
Label: No Factor

Sentence 5: In this case, the parties agree that the initial traffic stop ended after Deputy Trammel returned Mr. Powell’s license and rental agreement and issued him a warning citation.
Label: No Factor

Sentence 6: The detention in question thus began when Deputy Trammel then inquired if he could ask Mr. Powell more questions.
Label: No Factor

Sentence 7: Before us, the government does not pursue the argument that Mr. Powell consented to this continued detention, so our inquiry is limited to assessing whether, as a matter of law, reasonable suspicion of criminal activity existed at the time the initial traffic stop ended.
Label: No Factor

Sentence 8: In deciding whether reasonable suspicion existed to support an investigative detention, we consider the totality of the circumstances, viewed from the standpoint of an objectively reasonable police officer, to determine whether a particularized and objective basis existed for suspecting illegal activity.
Label: No Factor

Sentence 9: United States v. Lopez, 518 F.3d 790, 797 (10th Cir.2008).
Label: No Factor

Sentence 10: We evaluate the officer’s conduct in light of common sense and ordinary human experience, at the same time granting deference to a trained officer’s “ability to distinguish between innocent and suspicious circumstances.”
Label: No Factor

Sentence 11: Id. (quotation omitted).
Label: No Factor

Sentence 12: “Our task ... is not to pigeonhole each purported fact as either consistent with innocent travel or manifestly suspicious, but rather to determine whether the totality of the circumstances justify the detention.”
Label: No Factor

Sentence 13: United States v. Mendez, 118 F.3d 1426, 1431 (10th Cir.1997) (quotation omitted).
Label: No Factor

Sentence 14: The reasonable suspicion standard thus “requires an officer to have ‘some minimal level of objective justification,’ but he or she ‘need not rule out the possibility of innocent conduct as long as the totality of the circumstances suffices to form a particularized and objective basis for [an investigative] stop.’ ” Cortez-Galaviz, 495 F.3d at 1206 (quoting INS v. Delgado, 466 U.S. 210, 217, 104 S.Ct. 1758, 80 L.Ed.2d 247 (1984) and United States v. Vercher, 358 F.3d 1257, 1261 (10th Cir.2004)).
Label: No Factor

Sentence 15: In this case, several factors recognized by ornease law as contributing to reasonable suspicion lead us to conclude that standard was met.
Label: No Factor

Sentence 16: First, Deputy Trammel testified that he detected a strong odor of deodorizer, specifically fabric softener, in Mr. Powell’s vehicle, and that such odors are often used to mask the smell of illegal drugs:
Label: Masking Agent

Sentence 17: [I]n my training and experience, using masking odors such as laundry detergent, Febreze, ah’ fresheners, what they’re trying to do is mask the odor of the contraband that’s in the vehicle, just so you can’t smell it through your human nose.
Label: Masking Agent

Sentence 18: Only thing you can smell is them kind of masking odors.
Label: Masking Agent

Sentence 19: This one here smelled of fabric softeners, which a fabric softener is uncommon in a vehicle because that’s what you do laundry with.
Label: Masking Agent

Sentence 20: Appellee’s Supp. App. at 21.
Label: No Factor

Sentence 21: Our cases have consistently acknowledged that “a strong odor may give rise to reasonable suspicion on the part of law enforcement officials that the odor is being used to mask the smell of drugs.”
Label: Masking Agent

Sentence 22: United States v. Salzano, 158 F.3d 1107, 1114 (10th Cir. 1998); see United States v. Villa-Chaparro, 115 F.3d 797, 801 (10th Cir.1997) (odor of detergent and visible soap crystals contributed to reasonable suspicion); United States v. Hernandez-Rodriguez, 57 F.3d 895, 898 (10th Cir.1995) (strong smell of perfume supported reasonable suspicion that it was masking odor of drugs); United States v. Stone, 866 F.2d 359, 362 (10th Cir.1989) (odor of patchouli oil, used to mask other smells, contributed to reasonable suspicion of drug possession); see also United States v. West, 219 F.3d 1171, 1178-79 (10th Cir.2000) (“The Tenth Circuit has consistently held that the scent of air freshener is properly considered as a factor in the probable cause analysis.”).
Label: Masking Agent

Sentence 23: Second, Mr. Powell was driving a rental vehicle, a practice that, while of course consistent with lawful activity, we have also previously credited as common among drug couriers.
Label: Unusual Vehicle Ownership

Sentence 24: See United States v. Contreras, 506 F.3d 1031, 1036 (10th Cir.2007) (considering, as contributing to reasonable suspicion, the fact that rental cars are “often used by narcotics traffickers”); United States v. Williams, 271 F.3d 1262, 1270 (10th Cir.2001).
Label: Unusual Vehicle Ownership

Sentence 25: Contributing to the suspiciousness of Mr. Powell’s use of a rental vehicle in this case is the fact that he rented a GMC Yukon but told Deputy Trammel that he owned a Chevy Suburban — essentially the exact same vehicle— which he left at home.
Label: Unusual Vehicle Ownership

Sentence 26: As Deputy Trammel observed, the fact that Mr. Powell rented a Yukon instead of using his Suburban for the trip undercut the plausibility of his story:
Label: Unusual Vehicle Ownership

Sentence 27: [The vehicles are] equal in size, which that was another thing that I took note on, is that if you’ve got a vehicle of the same size, why would you pay all the money to rent a vehicle?
Label: Unusual Vehicle Ownership

Sentence 28: He had the same vehicle sitting at home that he could have used.
Label: Unusual Vehicle Ownership

Sentence 29: And this vehicle here wasn’t completely full anyway, so it wasn’t for any type of room.
Label: Unusual Vehicle Ownership

Sentence 30: And in comparison, it was actually the same.
Label: Unusual Vehicle Ownership

Sentence 31: Appellee’s Supp. App. at 22-23.
Label: No Factor

Sentence 32: An officer’s suspicion may reasonably be aroused where, as here, a defendant’s proposed factual scenario, if not entirely inexplicable, seems unlikely.
Label: No Factor

Sentence 33: See, e.g., United States v. Kopp, 45 F.3d 1450, 1453-54 (10th Cir.1995) (reasonable suspicion supported by the fact that officer “did not find it plausible that Defendant would drive from California to North Carolina merely to take a very dilapidated sofa to some friends”).
Label: No Factor

Sentence 34: Third, the rental agreement was of extremely short duration in light of Mr. Powell’s stated travel plans: he rented the Yukon in Colorado on May 15th, the traffic stop occurred in Kansas on the 16th, Mr. Powell stated he was driving to Kentucky to move there and start a business, and the vehicle was due back in Colorado on the 18th.
Label: Unusual Travel Plans

Sentence 35: Deputy Trammel testified:
Label: No Factor

Sentence 36: You know, he’s stating that he’s moving to Kentucky to start a business.
Label: Unusual Travel Plans

Sentence 37: There’s really no way on a three-day rental that he has, being one single driver by himself, any time at all to conduct any business, other than pretty well drive straight to Kentucky and turn around and drive straight back.
Label: Unusual Travel Plans

Sentence 38: I didn’t — and he also rented it both ways.
Label: Unusual Travel Plans

Sentence 39: Appellee’s Supp. App. at 25.
Label: No Factor

Sentence 40: The three-day rental agreement would essentially require Mr. Powell to drive the 1,190 miles from Denver to Lexington, unload the vehicle, and turn right around and drive 1,190 miles back.
Label: Unusual Travel Plans

Sentence 1: See Contreras, 506 F.3d at 1036 (considering “suspicious at best and incredible at worst” defendant’s claim “to have driven more than 1,200 miles to see her family, only to turn around within a day and begin the 1,200-mile drive back”).
Label: Unusual Travel Plans

Sentence 2: Mr. Powell argues that the rental agreement does not suggest criminal activity because it is physically possible to make the trip in that amount of time, he could have miscalculated the necessary time but later called the rental company to request an extension, or he could have chosen to be late returning the vehicle.
Label: No Factor

Sentence 3: Certainly, these are all possibilities, but under our precedent, the duration of his rental agreement, combined with the length of his trip, gives rise to a degree of suspicious conduct sufficient to contribute at least something to the reasonable suspicion calculus.
Label: Unusual Travel Plans

Sentence 4: Fourth, Mr. Powell was transporting a relatively small amount of luggage seemingly inconsistent with his stated purpose of moving to Kentucky.
Label: Indicia of Hard Travel

Sentence 5: Deputy Trammel testified that, instead of looking like someone moving all of his worldly possessions, Mr. Powell’s vehicle was “probably half full,” containing only four tires, two or three boxes, a light bag, and a pillow and blanket.
Label: Indicia of Hard Travel

Sentence 6: Appellee’s Supp. App. at 18-19.
Label: No Factor

Sentence 7: Our case law recognizes that an amount of luggage seemingly inconsistent with the stated purpose of one’s trip may fuel reasonable suspicion of involvement in illegal activity.
Label: Indicia of Hard Travel

Sentence 8: See, e.g., United States v. Jones, 44 F.3d 860, 863, 872 (10th Cir.1995) (three small pieces of luggage in the back seat suspiciously inconsistent with alleged two-week trip); United States v. Arango, 912 F.2d 441, 443, 447 (10th Cir.1990) (two small bags inconsistent with two-week vacation for two people); United States v. Espinosa, 782 F.2d 888, 891 (10th Cir. 1986) (“very little luggage” suspicious in light of claim of being on vacation).
Label: Indicia of Hard Travel

Sentence 9: Here, Mr. Powell told Deputy Trammel that this was his first trip and he would be making a second trip with his Suburban, and he argues on appeal that an individual may also legitimately choose to mail or ship his or her belongings for a cross-country move.
Label: Unusual Travel Plans

Sentence 10: But these explanations, while not implausible, do not entirely answer the question why one would make an initial cross-country trip to transport only half a vehicle of items if one plans on making a second trip and possibly shipping other items.
Label: Unusual Travel Plans

Sentence 11: As Deputy Trammel asked when testifying before the district court: in common experience doesn’t one usually pack things in tightly on the first trip to assure there will be room in the second trip for the remainder?
Label: Unusual Travel Plans

Sentence 12: Under our governing authority, an apparent (even if conceivably explicable) inconsistency between the stated purpose of a trip and the amount of luggage being transported may contribute to reasonable suspicion that illegal activity is afoot.
Label: Indicia of Hard Travel

Sentence 13: Finally, Deputy Trammel testified that Mr. Powell appeared “excessively nervous” and remained so throughout the entire encounter, even when the deputy returned to Mr. Powell’s vehicle to let him know the deputy was only giving him a warning citation.
Label: Nervous Behavior or Appearance

Sentence 14: Appellee’s Supp. App. at 15, 29-30.
Label: No Factor

Sentence 15: Mr. Powell was breathing heavily, “kept looking forward and was trying to avoid eye contact,” and offered an unprompted and extended narrative about his travel plans.
Label: Nervous Behavior or Appearance

Sentence 16: Id. at 15.
Label: No Factor

Sentence 17: Of course, even law-abiding citizens exhibit signs of nervousness when confronted by a law enforcement officer, and we have repeatedly held that “nervousness is of limited significance in determining reasonable suspicion.”
Label: Nervous Behavior or Appearance

Sentence 18: United States v. Wood, 106 F.3d 942, 948 (10th Cir.1997) (quoting United States v. Fernandez, 18 F.3d 874, 879 (10th Cir.1994)).
Label: No Factor

Sentence 19: But we have also held that there is “no reason ... to ignore [a defendant’s] nervousness in reviewing the totality of the circumstances,” especially when, as here, the nervousness is extreme or prolonged.
Label: Nervous Behavior or Appearance

Sentence 20: Williams, 271 F.3d at 1269.
Label: No Factor

Sentence 21: Considering all of these factors together, the totality of the circumstances reveals a scenario sufficient to form a particularized and objective basis for suspecting drug trafficking and detaining Mr. Powell for further questioning about illegal drugs and a dog sniff of his vehicle.
Label: Suspicion Found

Sentence 22: A number of orneases, holding that reasonable suspicion exists in circumstances remarkably similar to these, confirms the point.
Label: No Factor

Sentence 23: For example, in United States v. Sanchez-Valderuten, 11 F.3d 985 (10th Cir.1993), we held that the officer had reasonable suspicion to detain the defendant for further questioning based on the masking smell of air freshener and coffee in his vehicle, the defendant’s apparent evasion of the officer’s questions about his point of departure, and the defendant’s seemingly unusual choice to travel 1-70 when driving from New York to Washington state.
Label: Masking Agent, Unusual Travel Plans

Sentence 24: Id. at 989.
Label: No Factor

Sentence 25: Similarly, in United States v. Ledesma-Dominguez, 53 F.3d 1159 (10th Cir.1995), we held that the “[ajbsence of personal identification, appellant’s nervous behavior, and the presence of the masking odor [of ah- freshener] created ... identifiable and articulable suspicion that a drug-related crime was being committed.”
Label: Nervous Behavior or Appearance, Masking Agent

Sentence 26: Id. at 1161; see also Contreras, 506 F.3d at 1036 (holding reasonable suspicion existed based on defendant’s nervousness, her purported travel plans to drive 2,400 miles roundtrip for a one-day visit, the use of a rental car, and the presence of food wrappers from a California restaurant when the defendant claimed to be driving to Nebraska from Las Vegas).
Label: Nervous Behavior or Appearance, Unusual Travel Plans

Sentence 27: We see no convincing way to distinguish Mr. Powell’s case from these controlling precedents.
Label: No Factor

Sentence 28: Like the district court before us, we conclude that Mr. Powell’s roadside detention for further questioning and a canine sniff of his vehicle, after the initial traffic stop ended, was supported by reasonable suspicion of drug trafficking.
Label: Suspicion Found

Sentence 29: The order of the district court is therefore affirmed.
Label: No Factor

Sentence 30: This order and judgment is not binding precedent except under the doctrines of law of the case, res judicata and collateral estoppel.
Label: No Factor

Sentence 31: It may be cited, however, for its persuasive value consistent with Fed. R.App. P. 32.1 and 10th Cir. R. 32.1.
Label: No Factor

Sentence 32: See United States v. Santos, 403 F.3d 1120, 1127 (10th Cir.2005) (“[U]nless [nervousness] is unusually severe or persistent, or accompanied by other, more probative, grounds for reasonable suspicion, it is of limited significance in determining whether reasonable suspicion exists.”); Williams, 271 F.3d at 1269 (including “extreme nervousness [that] did not dissipate throughout the entire stop” in reasonable suspicion analysis); see also United States v. Ozbirn, 189 F.3d 1194, 1200 (10th Cir.1999) (taking into account "suspicious conduct” such as "nervous, talkative, and overly-friendly behavior”).
Label: Nervous Behavior or Appearance

Sentence 33: The government argues that Mr. Powell’s detention was lawful for another, separate reason — namely that Deputy Trammel had probable cause to arrest Mr. Powell for driving without a valid license — and cites to us by way of support United States v. Santana-Garcia, 264 F.3d 1188 (10th Cir.2001).
Label: No Factor

Sentence 34: See id. at 1192-94 (holding a detention lawful because, among other things, "probable cause to arrest arose seconds into the stop” when the officer became tiware that the defendant was driving without a license, even though the officer did not consider this to be a basis for the detention and instead relied on suspicion of drug trafficking).
Label: No Factor

Sentence 35: Whatever the merits or demerits of such an argument, the government did not raise it in the district court and we have no need to reach alternative grounds to affirm the district court’s judgment in this case.
Label: No Factor

Sentence 36: Dissenting/Concuring: 'Not Available', Dissenting/Concuring 2: 'Not Available', Dissenting/Concuring 3: 'Not Available'
Label: No Factor

