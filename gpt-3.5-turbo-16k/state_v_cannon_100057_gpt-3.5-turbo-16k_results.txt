Sentence 1: Case Name: 'James CANNON, Jr., Appellant-Defendant, v. STATE of Indiana, Appellee-Plaintiff'
Label: No Factor

Sentence 2: Citation: '722 N.E.2d 881', Court Name: 'Court of Appeals of Indiana'
Label: No Factor

Sentence 3: Decision Date YYYY-MM-DD: '2000-01-28'
Label: No Factor

Sentence 4: ID No. : 11473918, "OPINION
Label: No Factor

Sentence 5: BROOK, Judge
Label: No Factor

Sentence 6: Case Summary
Label: No Factor

Sentence 7: Appellant-defendant James Cannon, Jr. (“Cannon”) appeals his conviction of possession of cocaine as a Class C felony.
Label: No Factor

Sentence 8: We reverse.
Label: No Factor

Sentence 9: Cannon presents for our review a single issue, which we restate as whether the trial court erred in denying his motion to suppress evidence obtained as a result of a canine sniff test of his vehicle.
Label: No Factor

Sentence 10: Facts and Procedural History
Label: No Factor

Sentence 11: On February 20, 1997, Officer Keith Myers (“Officer Myers”) of the Kokomo Police Department initiated a traffic stop of a Ford pickup truck driven by Cannon because the truck had no rear bumper.
Label: No Factor

Sentence 12: As he activated his emergency lights, Officer Myers observed Cannon turn around and reach with his right arm toward the floorboard of the truck.
Label: Furtive Movement

Sentence 13: When the vehicles came to a stop, Cannon exited his truck and began to pace.
Label: Nervous Behavior or Appearance

Sentence 14: Officer Myers asked Cannon whether he had any weapons; Cannon responded negatively.
Label: No Factor

Sentence 15: Cannon displayed his hands upon Officer Myers’ request and consented to a search of his person, but declined to give consent for a search of his truck.
Label: Refused Consent

Sentence 16: Officer Myers, who was trained in narcotics detection and drug interdiction work, then retrieved his canine from his police car and led him to Cannon’s truck.
Label: No Factor

Sentence 17: The canine, which had been trained to react passively upon detection of a controlled substance, sniffed the exterior of Cannon’s truck and sat down.
Label: No Factor

Sentence 18: Officer Ryan Shuey, assisted by Officer Myers, searched the interior of Cannon’s truck and discovered two prescription bottles.
Label: Vehicle Contents Suggest Drugs

Sentence 19: The bottles contained several cream-colored rocks, subsequently identified as “rock” cocaine with an aggregate weight of 8.1 grams.
Label: Vehicle Contents Suggest Drugs

Sentence 20: Prior to trial, Cannon moved to suppress evidence of the cocaine obtained from his truck.
Label: No Factor

Sentence 21: At the conclusion of a suppression hearing, Cannon’s motion was denied.
Label: No Factor

Sentence 22: On September 28, 1998, Cannon was tried before a jury on charges of dealing in cocaine as a Class A felony and possession of cocaine as a Class C felony.
Label: No Factor

Sentence 23: Cannon was acquitted of dealing in cocaine, but convicted of possession of cocaine.
Label: No Factor

Sentence 24: He was sentenced to six years’ imprisonment and now appeals his conviction.
Label: No Factor

Sentence 25: Discussion and Decision
Label: No Factor

Sentence 26: Cannon claims that the evidence obtained pursuant to the canine sniff test of his vehicle was inadmissible.
Label: No Factor

Sentence 27: He concedes that the initial traffic stop was proper, but argues that Officer Myers lacked the requisite reasonable suspicion to detain the truck for further investigation.
Label: Suspicion Not Found

Sentence 28: We agree.
Label: No Factor

Sentence 29: The admissibility of evidence is within the sound discretion of the trial court and will not be disturbed absent a showing that the trial court abused its discretion.
Label: No Factor

Sentence 30: Johnson v. State, 710 N.E.2d 925, 927 (Ind.Ct.App.1999).
Label: No Factor

Sentence 31: Upon review of a trial court’s ruling on a motion to suppress evidence, we will examine the evidence most favorable to the ruling, together with any uncontradicted evidence.
Label: No Factor

Sentence 32: Callahan v. State, 719 N.E.2d 430, 434 (Ind.Ct.App.1999).
Label: No Factor

Sentence 33: We will neither reweigh the evidence nor judge witness credibility.
Label: No Factor

Sentence 34: Johnson, 710 N.E.2d at 927.
Label: No Factor

Sentence 35: A routine traffic stop is a relatively brief encounter, and generally the officer issuing a traffic citation faces a safety threat that is a good deal less than that present in the case of a custodial arrest.
Label: No Factor

Sentence 36: Knowles v. Iowa, 525 U.S. 113, 119 S.Ct. 484, 487-88, 142 L.Ed.2d 492 (1998).
Label: No Factor

Sentence 37: While the concern for officer safety in this context may justify a “minimal” additional intrusion of ordering a driver and passengers out of a vehicle, it does not by itself justify a full field-type search.
Label: No Factor

Sentence 38: In other words, while the Fourth Amendment to the United States Constitution permits a search incident to a custodial arrest, it does not permit a search incident to a traffic citation.
Label: No Factor

Sentence 39: Indeed, we have held that sniff testing by a trained narcotics detection canine is not a search within the meaning of the Fourth Amendment.
Label: No Factor

Sentence 40: State v. Watkins, 515 N.E.2d 1152, 1155 (Ind.Ct.App. 1987).
Label: No Factor

Sentence 1: Detention of personal property for such a sniff test is not prohibited if law enforcement authorities have reasonable suspicion to believe the property contains narcotics.
Label: Suspicion Found

Sentence 2: Kenner v. State, 703 N.E.2d 1122, 1125 (Ind.Ct.App.1999), trans. denied.
Label: No Factor

Sentence 3: The ensuing alert of a trained narcotics detection canine can then provide the probable cause necessary to obtain a search warrant.
Label: Suspicion Found

Sentence 4: Thus, the dispositive question before us is whether the sniff test of Cannon’s truck was premised upon a reasonable suspicion that it contained narcotics.
Label: Suspicion Found

Sentence 5: The reasonable suspicion requirement is satisfied where the facts known to the officer, together with the reasonable inferences arising from such facts, would cause an ordinarily prudent person to believe that criminal activity has occurred or is about to occur.
Label: Suspicion Found

Sentence 6: Carter v. State, 692 N.E.2d 464, 466 (Ind.Ct.App.1997).
Label: No Factor

Sentence 7: Reasonable suspicion entails something more than an inchoate and unparticularized suspicion or hunch, but considerably less than proof of wrongdoing by a preponderance of the evidence.
Label: Suspicion Found

Sentence 8: Luster v. State, 578 N.E.2d 740, 743 (Ind.Ct.App.1991).
Label: No Factor

Sentence 9: Consideration of the totality of the circumstances necessarily includes a determination of whether the defendant’s own actions were suspicious.
Label: Suspicion Found

Sentence 10: Carter, 692 N.E.2d at 467.
Label: No Factor

Sentence 11: At the suppression hearing Officer Myers testified that soon after he activated his emergency lights, he observed Cannon moving his right arm between the seats of his truck.
Label: Furtive Movement

Sentence 12: Cannon stopped his truck, exited immediately, and began pacing.
Label: Furtive Movement

Sentence 13: Although Cannon’s “nervous” and “suspicious” demeanor differed from that which Officer Myers had observed during a traffic stop one month earlier, Cannon consented to a search of his person.
Label: Nervous Behavior or Appearance

Sentence 14: After the body search revealed no weapons, Officer Myers requested Cannon’s permission to search his truck for weapons.
Label: No Factor

Sentence 15: Cannon stated that he had no weapons and declined to give consent for the vehicle search.
Label: Refused Consent

Sentence 16: Officer Myers testified that he felt Cannon was “being honest” about not having a weapon in his truck.
Label: No Factor

Sentence 17: He thus concluded that Cannon’s apparent “nervousness” must have another cause and conducted a canine sniff test with a dog trained specifically in narcotics detection.
Label: Nervous Behavior or Appearance

Sentence 18: According to his own admission, Officer Myers’ safety concerns had been alleviated before he retrieved his canine and led him around the perimeter of Cannon’s truck.
Label: No Factor

Sentence 19: At that point, his lingering suspicion about' the contents of Cannon’s truck was premised solely on Cannon’s “nervousness.”
Label: Nervous Behavior or Appearance

Sentence 20: Officer Myers’ hunch based only on a vague and general characterization of demeanor did not rise to the level of reasonable suspicion.
Label: Suspicion Not Found

Sentence 21: The sniff test of Cannon’s truck was therefore unreasonable, and the cocaine found as a result thereof should have been suppressed.
Label: Suspicion Not Found

Sentence 22: Reversed.
Label: No Factor

Sentence 23: NAJAM and ROBB, JJ., concur.
Label: No Factor

Sentence 24: See Ind.Code § 35-48-4-6(a)(b)(l).
Label: No Factor

Sentence 25: See Ind.Code § 35-48-4-l(a)(2)(C),(b)(1).
Label: No Factor

Sentence 26: .See Ind.Code § 35-48-4-6(a)(b)(l)(A).
Label: No Factor

Sentence 27: This court has recently held that a generalized suspicion that an individual presents a threat to an officer’s safety does not authorize a patdown search.
Label: No Factor

Sentence 28: See Jett v. State, 716 N.E.2d 69, 70-71 (Ind.Ct.App.1999).
Label: No Factor

Sentence 29: The officer must hold a reasonable belief that the particular individual is armed and dangerous.
Label: No Factor

Sentence 30: In Jett, a defendant’s rapid exit from his vehicle during a traffic stop did not support a reasonable suspicion of dangerousness.
Label: No Factor

Sentence 31: Here, however, Cannon consented to the search of his person and does not challenge its propriety upon appeal.",     Dissenting/Concuring:  'Not Available',     Dissenting/Concuring 2:  'Not Available',     Dissenting/Concuring 3:  'Not Available'
Label: No Factor

