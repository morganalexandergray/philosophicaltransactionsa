Sentence 1: Case Name: 'UNITED STATES of America v. Jerome Arthur CHAVIS'
Label: No Factor

Sentence 2: Citation: '902 F. Supp. 111', Court Name: 'United States District Court for the Eastern District of Texas'
Label: No Factor

Sentence 3: Decision Date YYYY-MM-DD: '1995-08-28'
Label: No Factor

Sentence 4: ID No. : 7813050, 'MEMORANDUM OPINION AND ORDER
Label: No Factor

Sentence 5: COBB, District Judge.
Label: No Factor

Sentence 6: A routine traffic stop on Interstate Highway 10 ultimately yielded 2.5 pounds of cocaine powder.
Label: Suspicion Found, Vehicle Contents Suggest Drugs

Sentence 7: Defendant, driver of the vehicle, was convicted and sentenced in this court for violating 21 U.S.C. § 841(a)(1).
Label: No Factor

Sentence 8: Prior to his trial, the Defendant moved to suppress the cocaine.
Label: No Factor

Sentence 9: A suppression hearing was held on October 6, 1993, and the court issued a ruling on December 13, 1993.
Label: No Factor

Sentence 10: The court found the search did not violate the Fourth Amendment of the Constitution.
Label: No Factor

Sentence 11: United States v. Chavis, 841 F.Supp. 780 (E.D.Tex.1993).
Label: No Factor

Sentence 12: At the October 16,1993, hearing, this court placed on the Defendant the burden of proving, by a preponderance of the evidence, that the cocaine was obtained in violation of his Fourth Amendment rights.
Label: No Factor

Sentence 13: Chavis, 841 F.Supp. at 782.
Label: No Factor

Sentence 14: Defendant appealed his conviction.
Label: No Factor

Sentence 15: He claimed that, at the suppression hearing, the burden should have been placed on the government.
Label: No Factor

Sentence 16: The Fifth Circuit agreed and held that this court erred by placing the burden on Chavis.
Label: No Factor

Sentence 17: United States v. Chavis, 48 F.3d 871, 872 (5th Cir.1995).
Label: No Factor

Sentence 18: The reviewing court vacated Defendant’s conviction and sentence and remanded to (1) allow for a further development of the record; and (2) give this court an opportunity to place correctly the burden on the government.
Label: No Factor

Sentence 19: Chavis, 48 F.3d at 873.
Label: No Factor

Sentence 20: The court held a hearing on August 16, 1995, to develop more fully the record and now reconsiders Defendant’s motion to suppress.
Label: No Factor

Sentence 21: Factual Background
Label: No Factor

Sentence 22: On August 26, 1992, Sergeant Paul Davis of the Texas Department of Public Safety was on routine patrol on Interstate 10 in Orange County, Texas.
Label: No Factor

Sentence 23: At approximately 11:10 p.m., he observed a Mercury Cougar change lanes without a signal.
Label: No Factor

Sentence 24: Davis stopped the car and asked the driver, later identified as Chavis, for his driver’s license.
Label: No Factor

Sentence 25: Chavis retrieved his wallet from the trunk of the car.
Label: No Factor

Sentence 26: Officer Davis observed Chavis pass over his license three times before finally recognizing it and handing it to Davis.
Label: No Factor

Sentence 27: Chavis also appeared nervous and his hands were shaking.
Label: Nervous Behavior or Appearance, Physical Appearance of Nervousness

Sentence 28: Chavis informed Officer Davis that he was travelling from Houston to Indiana.
Label: Unusual Travel Plans

Sentence 29: When Davis questioned Chavis as to why he began his long trip at night, Chavis simply responded that it was time to go.
Label: Unusual Travel Plans

Sentence 30: Initially, Chavis told Officer Davis that the ear he was driving belonged to him.
Label: No Factor

Sentence 31: However, the automobile’s insurance card listed Harold Snelling as the policyholder.
Label: Unusual Vehicle Ownership

Sentence 32: Chavis then responded that the car actually belonged to Snelling, his stepfather.
Label: Unusual Vehicle Ownership

Sentence 33: At 11:12 p.m. Officer Davis requested driver’s license and criminal history information on Chavis’ Indiana driver’s license number.
Label: No Factor

Sentence 34: While he was running Chavis’ criminal history in the patrol car, he observed Chavis pacing and talking to himself.
Label: No Factor

Sentence 35: Officer Davis received the criminal history check at 11:19 p.m.; it revealed that Chavis had previously been arrested for attempted murder and an offense involving stolen property.
Label: Legal Indications of Drug Use

Sentence 36: Based on a combination of the above mentioned factors, Davis was left with the impression that Chavis was trying to hide something.
Label: No Factor

Sentence 37: Davis therefore asked Chavis (at approximately 11:20 p.m.) for permission to search the car.
Label: No Factor

Sentence 38: Chavis did not consent to a search.
Label: Refused Consent

Sentence 39: Officer Davis then decided to call for a drug dog.
Label: No Factor

Sentence 40: Within roughly ten minutes of the original traffic stop (approximately 11:21 p.m.), Davis radioed Officers Cole, Buchholz, and Mardis, who were patrolling 1-10 with Cole’s trained K-9 Unit, Athos. Cole and the others had just passed Davis’s parked car on 1-10 and had noticed that Davis had pulled a car over.
Label: No Factor

Sentence 1: At approximately 11:24 p.m. they arrived on the scene.
Label: No Factor

Sentence 2: After Cole and the other officers arrived, Chavis began talking loudly and gave the officers consent to search the vehicle.
Label: No Factor

Sentence 3: The officers declined the offer, and Cole ran the dog around Chavis’ car.
Label: No Factor

Sentence 4: At approximately 11:27 p.m., the dog alerted on the trunk area.
Label: Vehicle Contents Suggest Drugs

Sentence 5: After the officers removed the luggage from the trunk, the dog alerted on an individual piece of luggage.
Label: Vehicle Contents Suggest Drugs

Sentence 6: After the dog’s alert, Officer Cole noticed a bulge in Chavis’ front pocket and asked Chavis if he was carrying any weapons.
Label: No Factor

Sentence 7: When Chavis pulled the contents of his pockets out to verify that he was unarmed, Cole observed two marijuana joints.
Label: Vehicle Contents Suggest Drugs

Sentence 8: At some point between the dog alert and 11:33 p.m. the officers took custody of the luggage and arrested Chavis.
Label: No Factor

Sentence 9: At 11:33 p.m. Officer Davis requested a check on the vehicle registration and to check if the vehicle had been reported stolen.
Label: No Factor

Sentence 10: The officers did not receive any information back concerning this cheek before they left the scene with the Defendant in custody.
Label: No Factor

Sentence 11: At the D.P.S. office in Orange, the officers opened the bag in Chavis’ presence and found 2.5 pounds of a substance which was later determined to be cocaine.
Label: Vehicle Contents Suggest Drugs

Sentence 12: The Law
Label: No Factor

Sentence 13: When the government conducts a warrantless search, it has the burden of proving, by a preponderance of the evidence, that the evidence was not obtained in violation of his Fourth Amendment rights.
Label: No Factor

Sentence 14: Chavis, 48 F.3d at 872 (citing United States v. Roch, 5 F.3d 894, 897 (5th Cir.1993)).
Label: No Factor

Sentence 15: Under Terry v. Ohio, 392 U.S. 1, 19, 88 S.Ct. 1868, 1873, 20 L.Ed.2d 889 (1968), the judicial inquiry into the reasonableness of a search or seizure “is a dual one — whether the officer’s action was justified at its inception, and whether it was reasonably related in scope to the circumstances which justified the interference in the first place.”
Label: No Factor

Sentence 16: This test applies to cases in which motorists are stopped for violating traffic laws.
Label: No Factor

Sentence 17: United States v. Shabazz, 993 F.2d 431, 435 (5th Cir.1993).
Label: No Factor

Sentence 18: The initial traffic stop of the vehicle was justified.
Label: No Factor

Sentence 19: Under Tex.Rev.Civ.Stat.Ann. art. 6701d § 68(a) (1977), a driver violates Texas traffic law if he fails to signal when “mov[ing] right or left upon a roadway.”
Label: No Factor

Sentence 20: Davis’ testimony that Chavis changed lanes without sig-nalling is uncontroverted.
Label: No Factor

Sentence 21: Terry’s second prong requires that the search or seizure be reasonably related in scope to the circumstances which initially justified the interference.
Label: No Factor

Sentence 22: In a traffic stop, this prong focuses upon the length of the detention itself.
Label: No Factor

Sentence 23: See Shabazz at 437 (“Therefore, the questioning did nothing to extend the duration of the initial, valid seizure”); United States v. Morales-Zamora, 914 F.2d 200 (10th Cir.1990) (canine sniff of defendants’ vehicle at a roadblock checkpoint was not an unreasonable detention because agents completed the canine sniff before another agent had finished examining the driver’s license and registration).
Label: No Factor

Sentence 24: There is no question that in a valid traffic stop, an officer can request a driver’s license, insurance papers, vehicle registration, run a computer check thereon, and issue a citation without exceeding the bounds of Terry.
Label: No Factor

Sentence 25: Shabazz, 993 F.2d at 437.
Label: No Factor

Sentence 26: The computer check on Chavis’ criminal history had returned before Davis called for the drug dog and the record specifies that Officer Davis ran the computer check on the car’s registration after Chavis was already in custody.
Label: No Factor

Sentence 27: As noted above, it is undisputed that, pursuant to a valid stop for a traffic offense, an officer may process a vehicle registration check.
Label: No Factor

Sentence 28: While the officer is processing an efficient, timely registration check, the length of the detention is presumptively within the bounds of the Fourth Amendment.
Label: No Factor

Sentence 29: See Shabazz, 993 F.2d at 437.
Label: No Factor

Sentence 30: In this ease, however, Chavis was already in custody at the time the vehicle registration check began.
Label: No Factor

Sentence 31: The vehicle registration check, therefore, cannot be used to justify detention between 11:19 p.m. (criminal background check complete) and 11:24 p.m. (the time at which Athos arrived on the scene).
Label: No Factor

Sentence 32: See, e.g., Shabazz, 993 F.2d at 436 (when reasonable suspicion related to initial stop has been assuaged, justification for detention evaporates and is no longer valid).
Label: No Factor

Sentence 33: The government can hardly be heard to argue that Officer Davis was detaining Chavis in order to run a vehicle registration check when the check was not even begun until twenty-plus minutes had elapsed and Chavis was already in custody.
Label: No Factor

Sentence 34: The question therefore becomes whether Officer Davis developed, during the time between the initial valid stop and the conclusion of the computer criminal history check (11:19 p.m.) reasonable suspicion sufficient to warrant detaining Chavis until Athos alerted on the trunk of the car (11:27 p.m.).
Label: No Factor

Sentence 35: The court finds that any detention Chavis may have endured beyond what was warranted by the traffic violation stop was justified by the reasonable suspicion Officer Davis developed that Chavis was transporting narcotics; Officer Davis’ basis for his reasonable suspicion was gained during his questioning and observations of Chavis that, (1) were reasonably related to the nature of the initial stop; and (2) were made before the length of the initial detention became unreasonable.
Label: Nervous Behavior or Appearance, Vehicle Contents Suggest Drugs

Sentence 36: See, e.g. United States v. Hardy, 855 F.2d 753 (11th Cir.1988), cert. denied, 489 U.S. 1019, 109 S.Ct. 1137, 103 L.Ed.2d 198 (1989) (reasonable suspicion acquired during a traffic stop justified a one hour detention of the driver after the investigation of the original traffic stop ended).
Label: No Factor

Sentence 37: As noted above, Officer Davis observed that Chavis, (1) was deceptive as to who actually owned the vehicle; (2) appeared to purposely ignore the presence of his wallet and license; (3) was visibly nervous and shaking; (4) was leaving a major drug distribution city; and (5) began to pace and talk to himself.
Label: Nervous Behavior or Appearance

Sentence 38: This led Officer Davis to believe that Chavis was attempting to hide something, possibly drugs.
Label: No Factor

Sentence 39: The court again notes that a dog “sniff’ is not a search within the meaning of the Fourth Amendment.
Label: No Factor

Sentence 40: United States v. Seals, 987 F.2d 1102 (5th Cir.1993), cert. denied, — U.S. -, 114 S.Ct. 155, 126 L.Ed.2d 116 (1993).
Label: No Factor

Sentence 1: Furthermore, individualized reasonable suspicion of drug-related criminal activity is not required when the dog sniff is employed during the seizure of a vehicle.
Label: No Factor

Sentence 2: The officers were therefore justified in using the drug dog during the traffic stop.
Label: No Factor

Sentence 3: Finally, the dog alert gave the officers probable cause to seize the luggage and arrest Chavis.
Label: No Factor

Sentence 4: Florida v. Royer, 460 U.S. 491, 506, 103 S.Ct. 1319, 1329, 75 L.Ed.2d 229 (1983); United States v. Gonzalez-Basulto, 898 F.2d 1011, 1013 (5th Cir.1990).
Label: No Factor

Sentence 5: Conclusion
Label: No Factor

Sentence 6: Accordingly, taking into consideration all the circumstances, the witnesses who testified, and the record made at both hearings, the court finds the cocaine seizure did not violate the Fourth Amendment of the United States Constitution.
Label: No Factor

Sentence 7: It is hereby ORDERED that Plaintiffs Motion to Suppress is DENIED.
Label: No Factor

Sentence 8: Counsel have stipulated that the court is free to consider evidence obtained at both the October 16, 1993, and the August 16, 1995, hearings.
Label: No Factor

Sentence 9: With that in mind, the court will use the facts developed at the August 16, 1995, hearing to supplement the facts set out in the court’s December 13, 1993, opinion.
Label: No Factor

Sentence 10: . Davis testified that Houston is a major drug distribution point.
Label: No Factor

Sentence 11: The record check revealed no convictions.
Label: No Factor

Sentence 12: This first "hit” occurred no more than twenty minutes after the original stop.
Label: No Factor

Sentence 13: The officers also discovered two empty metal boxes affixed underneath the car.
Label: No Factor

Sentence 14: .Although the officers issued a citation for the possession of marijuana, there is currently no charge before this court relating to the possession of marijuana.
Label: No Factor

Sentence 15: The court further notes that to allow officers to run all four computer checks individually (with each check taking anywhere from 4 to 15 minutes) would in effect grant the government carte blanche to detain a citizen upwards of one hour on a routine traffic stop.
Label: No Factor

Sentence 16: Such a policy would likely run afoul of the Fourth Amendment.
Label: No Factor

Sentence 17: See United States v. Sharpe, 470 U.S. 675, 685, 105 S.Ct. 1568, 1575, 84 L.Ed.2d 605 (1985) (in determining the reasonableness of the length of detention court should consider whether "police diligently pursued their investigation”).', 
Label: No Factor

Sentence 18: Dissenting/Concuring: 'Not Available', Dissenting/Concuring 2: 'Not Available', Dissenting/Concuring 3: 'Not Available'
Label: No Factor

