Sentence 1: Case Name: 'William ROUSE, Appellant, v. STATE of Florida, Appellee'
Label: No Factor

Sentence 2: Citation: '643 So. 2d 696', Court Name: 'Florida District Court of Appeal'
Label: No Factor

Sentence 3: Decision Date YYYY-MM-DD: '1994-10-17'
Label: No Factor

Sentence 4: ID No. : 7457752, 'ERVIN, Judge.
Label: No Factor

Sentence 5: Appellant, William Rouse, pleaded nolo contendere to possession of cocaine, reserv- mg his right to appeal the denial of his motion to suppress.
Label: No Factor

Sentence 6: We agree with appellant that the trial court erred in denying the motion, because the search and seizure of the cocaine was illegal, and we therefore reverse.
Label: No Factor

Sentence 7: The record discloses that two Tallahassee police officers stopped appellant’s car on Stadium Drive, an area well known for drug activity, because a headlight on the automobile was not illuminated.
Label: Unusual Travel Plans

Sentence 8: Officer Tennison asked Rouse for his driver’s license, but appellant replied that he did not have one in that his house had burned and the license was destroyed.
Label: Motorist license or Identification

Sentence 9: Tennison then conducted a routine computer check to verify the license information and ticketed Rouse for the headlight violation.
Label: No Factor

Sentence 10: Meanwhile, Officer Phillips noticed that Padre Sharpe, the passenger in the car, appeared to be acting nervously, so Phillips asked him for identification.
Label: Nervous Behavior or Appearance

Sentence 11: While Sharpe reached into his pocket, Phillips saw in his possession a bundle of money, and the officer’s suspicions were enhanced when Sharpe explained to him the reason for same was that he had sold a car several months ago and he was just saving the proceeds from the sale.
Label: Suspicious or Inconsistent Answers

Sentence 12: Consequently, Phillips asked Sharpe to sit in the patrol car while he and Officer Tennison questioned Rouse about the money.
Label: No Factor

Sentence 13: Phillips informed Tennison of his suspicions.
Label: No Factor

Sentence 14: Both officers noticed that appellant appeared tense and was wearing a gold necklace and ring, and they later testified that drug dealers typically wear jewelry.
Label: Motorist's Appearance Related to Drug Use or Sale

Sentence 15: Tenni-son questioned appellant, who denied that he possessed anything illegal inside his car, such as drugs, weapons or alcohol.
Label: Suspicious or Inconsistent Answers

Sentence 16: Rouse also denied the officers consent to search his automobile, whereupon they called the K-9 unit and informed appellant that it would conduct a sniff check on his car.
Label: Refused Consent

Sentence 17: Before the K-9 unit arrived, but after appellant had been accused of possessing drugs and was told the unit would perform a sniff check, appellant “consented” to be searched.
Label: No Factor

Sentence 18: While Phillips conducted a pat>-down, appellant pulled a bag containing cocaine from his shirt pocket, which Phillips then seized.
Label: Vehicle Contents Suggest Drugs

Sentence 19: Rouse and Sharpe were arrested.
Label: No Factor

Sentence 20: The entire encounter took approximately 20 to 25 minutes, and neither officer had any knowledge that appellant had participated in any prior criminal activity.
Label: No Factor

Sentence 21: In denying appellant’s motion to suppress, the trial court found that 20 minutes was a reasonable period for the stop and that the officers had a suspicion, founded on articula-ble facts, that criminal activity was present.
Label: Suspicion Found

Sentence 22: The court therefore concluded that Rouse was lawfully detained and that the search was legal.
Label: No Factor

Sentence 23: Although we are aware of the presumption of correctness that applies to trial court rulings on such motions, we nonetheless are required to reverse because the search and seizure were in our judgment illegal.
Label: Suspicion Not Found

Sentence 24: The officers were clearly entitled to stop and detain appellant for the traffic infraction; however, such a detention can last no longer than the time necessary to write the traffic citation.
Label: No Factor

Sentence 25: Cresswell v. State, 564 So.2d 480, 481 (Fla.1990); Blackmon v. State, 570 So.2d 1074, 1075 (Fla. 1st DCA 1990).
Label: No Factor

Sentence 26: To justify further detention, the officers were required to possess a reasonable suspicion based on articulable facts that criminal activity was afoot.
Label: Suspicion Found

Sentence 27: Cresswell, 564 So.2d at 481.
Label: No Factor

Sentence 28: Reasonable suspicion is something less than probable cause, but more than an inchoate and unparticularized suspicion or hunch.
Label: No Factor

Sentence 29: Even if we were to assume that the officers possessed the requisite founded suspicion to justify the extended detention, the search and seizure of the cocaine cannot be sustained under any theory of the law.
Label: Suspicion Not Found

Sentence 30: Initially, as neither officer had probable cause to believe appellant was armed with a dangerous weapon, the search and seizure cannot be justified under Florida’s Stop and Frisk Law, section 901.151, Florida Statutes (1991).
Label: No Factor

Sentence 31: Shaw v. State, 611 So.2d 552 (Fla. 1st DCA 1992) (search was unlawful because officer failed to articulate a valid basis for performing a weapons search under section 901.151).
Label: No Factor

Sentence 32: Moreover, Sharpe’s display of a bundle of money, coupled with appellant’s nervous behavior and gold jewelry do not constitute probable cause to believe Rouse was in possession of cocaine.
Label: Suspicious or Inconsistent Answers, Motorist's Appearance Related to Drug Use or Sale

Sentence 33: See State v. Arnold, 475 So.2d 301, 307 (Fla. 2d DCA 1985) (officers did not have reasonable suspicion to stop and detain man based on his personal appearance and apparent nervousness); Lowder v. State, 589 So.2d 933, 936 (Fla. 3d DCA 1991) (“There is no rational basis for a policy statement that from the possession of a relatively small amount of cash [$1,290] it may be inferred, as a matter of expertise, that one is a criminal.”), cause dismissed, 598 So.2d 78 (Fla.1992); L.S. v. State, 575 So.2d 331 (Fla. 5th DCA 1991) (Griffin, J., dissenting) (“[I]t is not obvious that jewelry-wearing is more typical of drug dealers than of certain law-abiding groups.”).
Label: Suspicion Not Found

Sentence 34: Nor can it be said that Rouse voluntarily consented to be searched under circumstances in which the consent only occurred after the defendant was advised that the K-9 unit would be called to conduct a sniff check.
Label: No Factor

Sentence 35: Compare Monroe v. State, 578 So.2d 847 (Fla. 2d DCA 1991) (defendant’s consent could not be considered voluntary in that she repeatedly refused officer’s request to search the trunk of the automobile after having been told by the officer that he suspected marijuana was inside the trunk, and consent was only obtained after officer said he would wait as long as it took to determine whether drugs were present, and that he would call in a canine unit to sniff for drugs); State v. Lanxon, 393 So.2d 1194 (Fla. 3d DCA 1981) (where officer approached defendant at airport and told her that he suspected her luggage contained drugs, and that if she did not consent to have the luggage searched, he would notify the narcotics unit and a canine team would sniff her luggage at her destination, defendant’s reluctant consent could not be considered voluntary).
Label: No Factor

Sentence 36: Although the state argues that the seizure of the cocaine was proper under the plain-view theory, it is undisputed that the cocaine was not in plain view until after the officer had illegally begun his pat-down of appellant.
Label: No Factor

Sentence 37: The law is well established that the fruits of an illegal search must be suppressed.
Label: No Factor

Sentence 38: Roberson v. State, 566 So.2d 561, 564 (Fla. 1st DCA 1990), review denied, 576 So.2d 291 (Fla.1991).
Label: No Factor

Sentence 39: And see Wong Sun v. United States, 371 U.S. 471, 83 S.Ct. 407, 9 L.Ed.2d 441 (1963).
Label: No Factor

Sentence 40: Because no valid basis exists for the search of appellant, we conclude the lower court erred in denying appellant’s motion to suppress the evidence seized as a result of the illegal search, and as the parties have agreed that this issue is dispositive of the case, we reverse appellant’s conviction and remand with instructions that appellant be discharged.
Label: No Factor

Sentence 1: REVERSED.
Label: No Factor

Sentence 2: BARFIELD and WEBSTER, JJ., concur.
Label: No Factor

Sentence 3: Dissenting/Concuring: 'Not Available', Dissenting/Concuring 2: 'Not Available', Dissenting/Concuring 3: 'Not Available'
Label: No Factor

