Sentence 1: Case Name: 'STATE of Utah, Plaintiff and Appellee, v. Bradford GETTLING, Defendant and Appellant'
Label: No Factor

Sentence 2: Citation: '229 P.3d 647', Court Name: 'Utah Supreme Court'
Label: No Factor

Sentence 3: Decision Date YYYY-MM-DD: '2010-03-12'
Label: No Factor

Sentence 4: ID No. : 6993398, 'PARRISH, Justice:
Label: No Factor

Sentence 5: INTRODUCTION
Label: No Factor

Sentence 6: Bradford Dale Gettling appeals the district court's denial of his motion to suppress.
Label: No Factor

Sentence 7: Police found drugs and drug paraphernalia in Gettling's personal belongings while conducting a search of the vehicle in which he had been traveling incident to the arrest of the vehicle's driver.
Label: Vehicle Contents Suggest Drugs

Sentence 8: During the pendency of this case, the United States Supreme Court ruled in Arizona v. Gant that officers could conduct a search of a vehicle incident to the arrest of a vehicle occupant only if the arres-tee could actually access the passenger compartment of the vehicle or i#f a failure to search could actually result in the loss of evidence pertaining to the crime underlying the arrest.
Label: No Factor

Sentence 9: - U.S. -, -, 129 S.Ct. 1710, 1719, 178 L.Ed.2d 485 (2009).
Label: No Factor

Sentence 10: Because the police officers were not authorized to conduct a search of the vehicle incident to the driver's arrest, we hold that Mr. Gettling was illegally detained at the time officers conducted a dog sniff and subsequent search of the car.
Label: Suspicion Not Found

Sentence 11: However, we apply the federal good-faith exception to the exelusionary rule and therefore uphold the denial of Mr. Get-tling's motion to suppress.
Label: No Factor

Sentence 12: BACKGROUND
Label: No Factor

Sentence 13: T2 On January 2, 2006, Deputy Shawn Radmall, a K-9 officer with the Utah County Sheriffs Department, pulled over a vehicle for an improper lane change and failure to come to a complete stop at a stop sign.
Label: No Factor

Sentence 14: The vehicle had three occupants Steven Canals, the driver; Amber Childs, the front seat passenger and vehicle owner; and Mr. Get-tling, the backseat passenger.
Label: No Factor

Sentence 15: None of the vehicle occupants held a valid driver license.
Label: No Factor

Sentence 16: After discovering that Mr. Canals had outstanding warrants and was driving with a suspended license, Deputy Radmall arrested him and placed him in the police eruiser.
Label: No Factor

Sentence 17: While effecting the arrest of Mr. Canals, Deputy Radmall noticed Mr. Gettling making furtive movements in the back seat and ordered him and Ms. Childs to exit the vehicle.
Label: Furtive Movement

Sentence 18: Deputy Radmall then conducted a free air sniff around the exterior of the vehicle with his narcotics-detection dog.
Label: No Factor

Sentence 19: The dog indicated the presence of nareotics in two areas: (1) the top of the driver's window, and (2) the door handle of the back passenger-side door.
Label: No Factor

Sentence 20: After the positive indication, Deputy Radmall put the dog in the car, where it detected narcotics in Mr. Gettling's belongings.
Label: Vehicle Contents Suggest Drugs

Sentence 21: Upon searching those belongings, Deputy Radmall discovered methamphetamine and drug paraphernalia in a closed glasses case.
Label: Vehicle Contents Suggest Drugs

Sentence 22: Both the driver and the other passenger denied ownership, and Mr. Gettling indicated by nodding that the glasses case and its contents belonged to him.
Label: No Factor

Sentence 23: He later entered a conditional guilty plea, which allowed him to appeal the district court's denial of his motion to suppress the evidence.
Label: No Factor

Sentence 24: ANALYSIS
Label: No Factor

Sentence 25: POLICE OFFICERS CAN DETAIN PASSENGERS UNTIL THE PURPOSE OF THE TRAFFIC STOP HAS BEEN COMPLETED
Label: No Factor

Sentence 26: 13 Mr. Gettling argues that he was illegally detained at the time Deputy Rad-mall conducted the free air sniff with his narcotics-detection dog and that the drugs and drug paraphernalia found in the subsequent search of his belongings should be suppressed.
Label: Suspicion Not Found

Sentence 27: The State counters that Mr. Gettling was lawfully detained at the time of the search because Deputy Radmall was still permitted to conduct a search incident to the arrest of the driver and thus had not concluded the lawful purpose of the stop at the time of the canine sniff.
Label: No Factor

Sentence 28: After the Supreme Court issued Arizona v. Gant, - U.S. -, 129 S.Ct. 1710, 173 L.Ed.2d 485 (2009), clarifying that officers are not permitted to conduct routine searches incident to arrest, the State filed a supplemental brief arguing that Gant does not apply to situations with unsecured passengers, that Deputy Radmall had further need to control the scene, and that the dog sniff was only a de minimis extension of the lawful traffic stop.
Label: No Factor

Sentence 29: The State alternatively argues that Gant should not have retroactive application.
Label: No Factor

Sentence 30: We determine that the purpose of the stop concluded after the arrest of the driver.
Label: No Factor

Sentence 31: Thereafter, Deputy Radmall had no continued justification to detain the passengers.
Label: No Factor

Sentence 32: However, while Mr. Gettling was unlawfully detained at the time of the search, we apply the federal good-faith exception to the exelu-sionary rule to any evidence discovered as a result of the unlawful detention.
Label: No Factor

Sentence 33: 15 Police can detain individuals on reasonable articulable suspicion that they are engaged or about to be engaged in criminal activity.
Label: No Factor

Sentence 34: State v. James, 2000 UT 80, ¶ 10, 13 P.3d 576.
Label: No Factor

Sentence 35: Observing a vehicle commit a traffic violation gives police probable cause to detain the driver and passengers of the vehicle.
Label: No Factor

Sentence 36: Arizona v. Johnson, - U.S. -, -, 129 S.Ct. 781, 788, 172 L.Ed.2d 694 (2009).
Label: No Factor

Sentence 37: If, during the course of a lawful traffic stop, an officer gains further suspicion that a vehicle occupant is engaged in illegal activity, the officer can detain the vehicle further in order to investigate.
Label: No Factor

Sentence 38: State v. Hansen, 2002 UT 125, ¶ 31, 63 P.3d 650.
Label: No Factor

Sentence 39: When officers have concluded their investigation of their initial suspicion and any further suspicion that arose during the stop, they are required to end the detention.
Label: No Factor

Sentence 40: "[E)ven a small intrusion beyond the legitimate scope of an initially lawful search is unlawful under the Fourth Amendment."
Label: No Factor

Sentence 1: State v. Schlosser, 774 P.2d 1132, 1135 (Utah 1989) (citing Arizona v. Hicks, 480 U.S. 321, 825, 107 S.Ct. 1149, 94 L.Ed.2d 847 (1987)).
Label: No Factor

Sentence 2: T6 In State v. Baker, also announced today, we held that when a traffic stop eulmi-nates in the arrest of the driver, the "officers must release any passengers who were detained incident to the detention of the vehicle" after the officer has completed all procedures incident to the arrest of the driver.
Label: No Factor

Sentence 3: Baker, 2010 UT 18, ¶ 18, 229 P.3d 650.
Label: No Factor

Sentence 4: We also declined to adopt any de minimis exception to a passenger's Fourth Amendment rights in order to allow officers to conduct a canine sniff after the lawful purpose of the stop has concluded.
Label: No Factor

Sentence 5: ¶¶ 30, 33; see also Illinois v. Caballes, 543 U.S. 405, 407-08, 125 S.Ct. 834, 160 L.Ed.2d 842 (2005) (finding that although a dog sniff by a trained narcotics-detection dog is not a search, it is not lawful to conduct a dog sniff if it prolongs the stop).
Label: No Factor

Sentence 6: However, because the detention of the passengers in Baker took place while officers were conducting a routine search incident to arrest, a search allowed prior to the recent United States Supreme Court decision in Gant, 129 S.Ct. 1710, we determined that application of the federal exclusionary rule would not deter the police from unlawful conduct.
Label: No Factor

Sentence 7: Baker ¶ 39.
Label: No Factor

Sentence 8: We therefore applied the federal good-faith exception to the exelu-sionary rule to searches conducted by officers in reliance on Judicial precedent authorizing a search of a vehicle incident to the arrest of a vehicle occupant.
Label: No Factor

Sentence 9: In this case, Deputy Radmall detained Mr. Gettling while conducting a search incident to driver's arrest that, prior to Gant, would have been constitutional.
Label: No Factor

Sentence 10: At the time of Mr. Gettling's detention, Deputy Radmall had no reasonable articulable suspicion that Mr. Gettling was involved in criminal activity and thus could not continue to detain him after he completed the arrest of the driver.
Label: No Factor

Sentence 11: But Deputy Radmall did detain Mr. Gettling as he cireled the vehicle with the narcotics-detection dog.
Label: No Factor

Sentence 12: The fact that Mr. Gettling may have made "furtive movements" in the back seat is not sufficient justification to allow the officers to extend the stop.
Label: Furtive Movement

Sentence 13: Schlosser, 774 P.2d at 1137 ("Mere furtive gestures of an occupant of an automobile do not give rise to an articulable suspicion suggesting criminal activity.").
Label: Furtive Movement

Sentence 14: Additionally, the fact that Deputy Radmaill's nareoties-detection dog was present in his patrol vehicle at the time of the stop, rather than arriving on the scene after the lawful purposes of the stop had concluded, has no bearing on whether the stop was improperly extended.
Label: No Factor

Sentence 15: Once the lawful purpose of the stop concluded, Deputy Radmall was required to release the passengers.
Label: No Factor

Sentence 16: However, the evidence uncovered during the search of the vehicle should not be excluded because Deputy Radmall relied on settled precedent to search the vehicle incident to the arrest of its driver.
Label: No Factor

Sentence 17: CONCLUSION
Label: No Factor

Sentence 18: T8 Although Deputy Radmall violated Mr. Gettling's Fourth Amendment rights by detaining him after concluding the lawful purpose of the traffic stop, we apply the federal good-faith exception to the exclusionary rule and uphold the district court's denial of Mr. Gettling's motion to suppress.
Label: No Factor

Sentence 19: T 9 Chief Justice DURHAM, Associate Chief Justice DURRANT, Justice WILKINS and Justice NEHRING concur in Justice PARRISH's opinion.',
Label: No Factor

Sentence 20: Dissenting/Concuring: 'Not Available', Dissenting/Concuring 2: 'Not Available', Dissenting/Concuring 3: 'Not Available'
Label: No Factor

