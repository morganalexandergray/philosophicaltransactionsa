Sentence 1: Case Name: 'STATE OF GEORGIA v. MONTFORD'
Label: No Factor

Sentence 2: Citation: '217 Ga. App. 339', Court Name: 'Court of Appeals of Georgia'
Label: No Factor

Sentence 3: Decision Date YYYY-MM-DD: '1995-04-11'
Label: No Factor

Sentence 4: ID No. : 847405, 'Smith, Judge.
Label: No Factor

Sentence 5: This is an appeal by the State of Georgia from the adverse judgment of the superior court on its complaint for forfeiture of an automobile and other personal property.
Label: No Factor

Sentence 6: The items were seized after the discovery of marijuana and cocaine within the vehicle during a traffic stop.
Label: Vehicle Contents Suggest Drugs

Sentence 7: OCGA § 16-13-49 et seq.
Label: No Factor

Sentence 8: Pursuant to OCGA § 16-13-49 (n), the State first filed a “notice of seizure of personal property valued at $25,000 or less.”
Label: No Factor

Sentence 9: The property, which was taken from the possession of appellee Vernon C. Montford, included a 1986 Acura Legend and $715 in cash.
Label: Motorist license or Identification, Vehicle Contents Suggest Drugs

Sentence 10: Montford filed a notice of claim to the property on May 20, 1994.
Label: No Factor

Sentence 11: The State responded by filing a complaint seeking forfeiture of the car and cash, as well as a cellular phone and a pistol.
Label: No Factor

Sentence 12: The State then successfully moved to join Montford as a party defendant.
Label: No Factor

Sentence 13: Montford answered and a bench trial followed.
Label: No Factor

Sentence 14: The court ruled in favor of Montford, concluding probable cause did not exist to search the vehicle.
Label: Suspicion Not Found

Sentence 15: See OCGA § 16-13-49 (s) (1).
Label: No Factor

Sentence 16: This appeal followed.
Label: No Factor

Sentence 17: Montford incorporated the police report into his answer and essentially stipulated the facts contained therein at trial.
Label: No Factor

Sentence 18: Moreover, Montford did not argue at trial that he was stopped or detained illegally prior to the time at which a drug dog was walked around his vehicle.
Label: No Factor

Sentence 19: Our inquiry therefore does not turn on conflicts in the evidence or the validity of the stop, but simply whether the facts before the court did or did not establish probable cause authorizing a warrantless search of the vehicle.
Label: No Factor

Sentence 20: See OCGA § 24-4-24 (b) (7).
Label: No Factor

Sentence 21: Officer Johnny Burnette of the Chamblee Police Department’s canine unit pulled Montford over after observing his vehicle cross over the lane divider several times.
Label: No Factor

Sentence 22: Burnette asked for Montford’s driver’s license and proof of insurance.
Label: Motorist license or Identification

Sentence 23: Montford complied, but the insurance card produced belonged to another vehicle.
Label: Motorist license or Identification

Sentence 24: Montford explained that he had just purchased the vehicle and provided papers documenting his purchase of the 1986 Acura Legend a week earlier for $4,500 cash.
Label: No Factor

Sentence 25: As Burnette spoke with Montford, Montford became increasingly nervous.
Label: Nervous Behavior or Appearance

Sentence 26: Burnette then told Montford he was going to check Montford’s driver’s license.
Label: No Factor

Sentence 27: Burnette walked back to his police unit, where he told a fellow officer, Klerlein, that he believed there were narcotics in the car.
Label: No Factor

Sentence 28: As the two officers stood talking, Montford exited his vehicle and approached them.
Label: No Factor

Sentence 29: Officer Klerlein inquired about the bulge in Montford’s pocket, and Montford produced from his pocket a cellular phone.
Label: Suspicious Communications Device

Sentence 30: Officer Burnette asked Montford if he had drugs on him, and Montford replied negatively.
Label: No Factor

Sentence 31: Burnette then asked if Montford “minded emptying his pockets on the hood of my car,” and Montford replied that “he had no problem doing so.”
Label: No Factor

Sentence 32: Burnette told Montford he did not have to comply, but Montford responded that he “had nothing to hide.”
Label: No Factor

Sentence 33: Montford then produced from his pockets $715 in “folded up money” and some change.
Label: Motorist license or Identification

Sentence 34: Burnette also observed that Montford was wearing a beeper on his belt or pocket, “a ring on almost all his fingers,” and necklaces.
Label: Motorist's Appearance Related to Drug Use or Sale

Sentence 35: Burnette then asked if Montford had any weapons or anything else in his pockets and performed a pat-down to confirm that Montford had no weapons on his person.
Label: No Factor

Sentence 36: At this point, Burnette returned Montford’s driver’s license and other documentation to him.
Label: No Factor

Sentence 37: Burnette then asked Montford whether he could search his vehicle for narcotics.
Label: No Factor

Sentence 38: Montford replied he preferred that Burnette not do so because he only wanted to go home.
Label: Refused Consent

Sentence 39: Burnette responded that Montford indeed “had every right to deny a search of his vehicle.”
Label: No Factor

Sentence 40: Burnette advised Montford he intended “to walk a drug dog around his vehicle to check for narcotics.”
Label: No Factor

Sentence 1: Montford replied that Burnette should “go ahead and do his job.”
Label: No Factor

Sentence 2: Burnette then asked if there were narcotics in the vehicle, and Montford replied negatively.
Label: Suspicious or Inconsistent Answers

Sentence 3: Burnette then walked a drug dog around the vehicle, and the dog alerted on the “driver’s side passenger door.”
Label: Suspicion Found, Vehicle Contents Suggest Drugs

Sentence 4: At this time, Burnette informed Montford that he was going to “put [the dog] inside the vehicle.”
Label: No Factor

Sentence 5: Montford asserted that such action would require a search warrant, but Burnette informed him that a warrant was not required “due to the K-9 alert.”
Label: No Factor

Sentence 6: The search led to the discovery of the pistol at issue, five bags of marijuana, and a bag of powder cocaine.
Label: Vehicle Contents Suggest Drugs

Sentence 7: Montford was arrested, and the property at issue here was seized.
Label: No Factor

Sentence 8: We find no violation of Montford’s constitutional rights occurred at any point in his encounter with Officer Burnette.
Label: No Factor

Sentence 9: We may safely accept Montford’s contention that the large quantity of cash he was carrying, the unusual amount of jewelry he was wearing, the fact that he was carrying a beeper and cellular phone on his person, the fact that the encounter took place at approximately 1:40 a.m., and the undisputed fact that Montford was “extremely nervous” during the encounter were not in themselves factors establishing probable cause to search his vehicle.
Label: Nervous Behavior or Appearance, Motorist's Appearance Related to Drug Use or Sale, Suspicious Communications Device

Sentence 10: Taken together, however, these indicia were clearly sufficient to establish a reasonable suspicion that Montford was transporting illegal drugs in his vehicle.
Label: Suspicion Found

Sentence 11: Under such circumstances, Burnette was authorized to at least walk the drug dog around Montford’s vehicle to see whether the dog detected drug odors emanating from the vehicle.
Label: Suspicion Found

Sentence 12: See generally O’Keefe v. State, 189 Ga. App. 519, 526 (3) (376 SE2d 406) (1988) (“[U]se of a trained drug detection dog, in a location where he is entitled to be, to sniff the exterior of a container, is not an unreasonable search within the meaning of the Fourth Amendment of the U. S. Constitution or Art. I, Sec. I, Par. XIII, of the Georgia Constitution of 1983.”).
Label: No Factor

Sentence 13: When the dog alerted for drugs, that factor, combined with the factors prompting the use of the drug dog in the first instance, established probable cause for Officer Burnette to believe Montford was in possession of illegal drugs within his vehicle, authorizing the subsequent search of its interior.
Label: Suspicion Found

Sentence 14: See, e.g., Roundtree v. State, 213 Ga. App. 793, 794-795 (446 SE2d 204) (1994).
Label: No Factor

Sentence 15: Decided April 11, 1995
Label: No Factor

Sentence 16: Reconsideration denied April 27, 1995
Label: No Factor

Sentence 17: J. Tom Morgan, District Attorney, Robert W. Gurd, Gregory J. Lohmeier, Desiree S. Peagler, Assistant District Attorneys, for appellant.
Label: No Factor

Sentence 18: William T. Payne, for appellee.
Label: No Factor

Sentence 19: The trial court’s decision cannot be reconciled with O’Keefe and Roundtree, supra, and must therefore be reversed.
Label: No Factor

Sentence 20: In light of our holding in Division 1, we find it unnecessary to address the State’s remaining enumerations.
Label: No Factor

Sentence 21: Judgment reversed.
Label: No Factor

Sentence 22: Birdsong, P. J., and Johnson, J., concur.
Label: No Factor

Sentence 23: “We don’t dispute the facts in the police report.
Label: No Factor

Sentence 24: We agree 100 percent with those facts as stated by Officer Burnette in his incident report.
Label: No Factor

Sentence 25: So we simply incorporated those facts into the answer.”
Label: No Factor

Sentence 26: As noted above, Montford does not contend that he was being unlawfully detained prior to the time the drug dog was walked around the vehicle; he argues only that during the traffic stop his vehicle was unlawfully searched.', 
Label: No Factor

Sentence 27: Dissenting/Concuring:  'Not Available',     Dissenting/Concuring 2:  'Not Available',     Dissenting/Concuring 3:  'Not Available'
Label: No Factor

