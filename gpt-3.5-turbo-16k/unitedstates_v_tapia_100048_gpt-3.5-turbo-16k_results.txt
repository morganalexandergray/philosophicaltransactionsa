Sentence 1: Case Name: 'UNITED STATES of America, Plaintiff-Appellee, v. Bernardino Homero TAPIA, Defendant-Appellant'
Label: No Factor

Sentence 2: Citation: '912 F.2d 1367', Court Name: 'United States Court of Appeals for the Eleventh Circuit'
Label: No Factor

Sentence 3: Decision Date YYYY-MM-DD: '1990-09-25'
Label: No Factor

Sentence 4: ID No. : 9052878, 'FAY, Circuit Judge:
Label: No Factor

Sentence 5: Defendant-appellant Bernardino Tapia was convicted by a jury on one count of unlawful possession of marijuana with intent to distribute, in violation of 21 U.S.C. § 841(a)(1), after the trial judge refused to suppress evidence obtained by police from a warrantless investigatory stop and extensive search of the vehicle in which appellant was a passenger.
Label: No Factor

Sentence 6: Appellant challenges his conviction by contending that the search of the vehicle violated the fourth amendment because police lacked probable cause and exceeded the permissible limits of an investigatory stop articulated in Terry v. Ohio, 392 U.S. 1, 88 S.Ct. 1868, 20 L.Ed.2d 889 (1968).
Label: No Factor

Sentence 7: Appellant argues therefore that evidence garnered from the vehicular search should have been excluded from the jury’s consideration at trial.
Label: No Factor

Sentence 8: We agree that no sufficient factual basis existed to support the district court’s inference of reasonable and articulable suspicion on the part of police to justify an investigatory stop and search of the vehicle after its initial detainment for a speeding offense.
Label: Suspicion Not Found

Sentence 9: Accordingly, we REVERSE appellant’s conviction.
Label: No Factor

Sentence 10: On August 10, 1989, at approximately 3:50 p.m., Alabama State Trooper John Guthrie observed an early model, black-over-brown Ford LTD in the left northbound lane of Interstate 59 traveling towards Birmingham, Alabama.
Label: No Factor

Sentence 11: Officer Guthrie estimated and then confirmed via radar that the car was traveling approximately 67 miles per hour in a 55 miles per hour zone.
Label: No Factor

Sentence 12: He also observed that the vehicle had Texas license plates, that the windows were rolled down, and that a Mexican male appeared to be driving the car.
Label: Driver Status

Sentence 13: Officer Guthrie, who was traveling south, testified that as the vehicles passed each other, the driver of the Ford looked towards him, made eye contact, and then quickly looked away.
Label: No Factor

Sentence 14: Guthrie crossed the median and headed north in pursuit of the vehicle.
Label: No Factor

Sentence 15: As he caught up with the Ford, which was now traveling in the right-hand lane ahead of a large tractor-trailer truck, the car began pulling back into the left lane.
Label: No Factor

Sentence 16: Upon seeing Guthrie’s patrol car in the rear view mirror, however, the driver returned immediately to the right lane.
Label: No Factor

Sentence 17: Trooper Guthrie then moved into the right lane behind the Ford, initiated his blue lights, and pulled the vehicle over.
Label: No Factor

Sentence 18: When the Ford stopped, Guthrie noticed a hand appear in the back window.
Label: No Factor

Sentence 19: A second Mexican male passenger who apparently had been lying down in the back seat sat up as Guthrie stepped out of his patrol car to confront the driver.
Label: No Factor

Sentence 20: As both driver and policeman exited their respective vehicles, Officer Guthrie approached the car and asked the driver to produce his driver’s license and registration.
Label: Motorist license or Identification

Sentence 21: The driver handed Guthrie a Texas driver’s license which identified him as Arturo Tapia from San Antonio, Texas. When Guthrie again asked for the vehicle’s registration, the driver stated in Spanish that he did not understand English, and the passenger informed the officer that the driver could not speak English.
Label: Suspicious or Inconsistent Answers

Sentence 22: The passenger then upon request produced his own driver’s license, which revealed him to be the appellant, Bernardino Tapia, also from San Antonio, Texas.
Label: No Factor

Sentence 23: When asked for .the registration, Bernardino reached over into the glove box, and gave Guthrie an insurance card in a third party’s name.
Label: No Factor

Sentence 24: He informed Guthrie that the car belonged to his brother-in-law, and that he and Arturo were heading to Atlanta, Georgia in order to find work.
Label: Unusual Travel Plans

Sentence 25: Officer Guthrie testified that while the above exchanges were taking place, he noticed that the driver, Arturo Tapia, seemed nervous, and that his hands were shaking.
Label: Nervous Behavior or Appearance

Sentence 26: Guthrie also testified that he saw no clothing or luggage inside the car, with the exception of one red nylon overnight bag, to indicate that the two men were moving from one place to another.
Label: No Factor

Sentence 27: At this point, Officer Guthrie took Arturo Tapia back to his patrol car and had him sit down in the front seat of the vehicle.
Label: No Factor

Sentence 28: Guthrie gave him a “consent to search” form written in Spanish, moved his hand over the form, and asked Arturo if he could read Spanish.
Label: No Factor

Sentence 29: The latter nodded his head.
Label: No Factor

Sentence 30: As Guthrie filled out a speeding ticket, Arturo Tapia appeared to read the form, then reached for Guthrie’s pen and signed it where Guthrie had marked an “X.”
Label: No Factor

Sentence 31: The time was approximately 3:56 p.m.
Label: No Factor

Sentence 32: By this time, another trooper, Darryl Hall, had arrived.
Label: No Factor

Sentence 33: After both officers witnessed the consent form, Officer Guthrie instructed Bernardino Tapia to step out of the Ford’s back seat, and then began a thorough search of the vehicle.
Label: No Factor

Sentence 34: Among other things, Guthrie discovered fresh scratch marks on the car’s gas tank beneath the trunk area indicating that the tank had been removed.
Label: No Factor

Sentence 35: Guthrie then summoned two canine units, both of whom “alerted” at the left rear panel on the driver’s side of the Ford, and the Tapias and their vehicle consequently were taken to the troopers station.
Label: No Factor

Sentence 36: Further inspection of the car ultimately yielded the discovery of 45 pounds of compressed, baled marijuana in the gas tank.
Label: Vehicle Contents Suggest Drugs

Sentence 37: At the conclusion of the suppression hearing, in which expert testimony was offered regarding Arturo Tapia’s inability to read and comprehend Spanish fully, the district court ruled that the consent form signed by Arturo was not valid.
Label: No Factor

Sentence 38: The government does not contest this ruling.
Label: No Factor

Sentence 39: Nevertheless, the court denied the defendants’ motion to suppress, finding that the police, after stopping the Ford for speeding, had reasonable suspicion to conduct an investigatory stop and further search of the vehicle.
Label: Suspicion Found

Sentence 40: In reaching its conclusion of reasonable suspicion, the district court stated that the factors it relied upon included the following: the vehicle traveling along the interstate possessed a Texas tag; the individuals in the car were both Mexican; although the men informed the police officer that they were traveling to Atlanta to work there, there was no indication of luggage within the interior of the car, and the trunk did not appear to be heavily loaded; and the driver of the vehicle appeared to be shaking and nervous about being stopped.
Label: Nervous Behavior or Appearance, Driver Status, Unusual Travel Plans

Sentence 1: All of these circumstances, in the district court’s view, “gave rise to a reasonable basis and cause for further search of the vehicle even without a consent, provided that search was reasonable.”
Label: Suspicion Found

Sentence 2: The evidence resulting from the search consequently was admitted at trial.
Label: No Factor

Sentence 3: A jury acquitted the driver, co-defendant Arturo Tapia, on the charge of possession of marijuana with intent to distribute.
Label: No Factor

Sentence 4: Arturo’s brother Bernardino, however, the passenger, was found guilty and convicted of the same crime.
Label: No Factor

Sentence 5: This appeal followed.
Label: No Factor

Sentence 6: There appears to be little question as to the validity of Trooper Guthrie’s initial stop of defendants’ vehicle for speeding.
Label: No Factor

Sentence 7: Rather, the inquiry centers upon whether there were indeed circumstances present that provided a "reasonable basis and cause for further search of the vehicle," as the district court concluded.
Label: Suspicion Found

Sentence 8: In considering Officer Guthrie's search, we emphasize at the outset the district court's finding that the consent to search the vehicle allegedly given by co-defendant Arturo Tapia was invalid-a finding not challenged by the government on appeal.
Label: No Factor

Sentence 9: Thus, any analysis of the propriety of police conduct in searching defendants' vehicle must proceed under the assumption that no consent to search existed.
Label: No Factor

Sentence 10: In the absence of consent, the reasonableness of Guthrie's decision to detain and search the vehicle in which appellant Bernardino Tapia was a passenger is governed by the principles set forth in Terry v. Ohio, 392 U.S. 1, 88 S.Ct. 1868, 20 L.Ed.2d 889 (1968).
Label: Suspicion Not Found

Sentence 11: According to Terry, even in the absence of probable cause, police may stop persons and detain them briefly in order to investigate a reasonable suspicion that such persons are involved in criminal activity.
Label: Suspicion Found

Sentence 12: In justifying such an intrusion, the "reasonableness" standard requires that a police officer "be able to point to specific and articulable facts which, taken together with rational inferences from those facts, reasonably warrant that intrusion."
Label: Suspicion Found

Sentence 13: Id. at 21, 88 S.Ct. at 1879 (footnote omitted).
Label: No Factor

Sentence 14: In this regard, "reasonable suspicion" is determined from the totality of the circumstances, United States v. Sokolow, 490 U.S. 1, 109 S.Ct. 1581, 1585, 104 L.Ed.2d 1 (1989), and from the collective knowledge of the officers involved in the stop.
Label: Suspicion Found

Sentence 15: United States v. Williams, 876 F.2d 1521, 1524 (11th Cir.1989); United States v. Cotton, 721 F.2d 350, 352 (11th Cir.1983), cert. denied, 465 U.S. 1108, 104 S.Ct. 1614, 80 L.Ed.2d 143 (1984).
Label: No Factor

Sentence 16: Such a level of suspicion is obviously considerably less than proof of wrongdoing by a preponderance of the evidence, INS v. Delgado, 466 U.S. 210, 217, 104 S.Ct. 1758, 1763, 80 L.Ed.2d 247 (1984), or even the implicit requirement of probable cause that a fair probability that evidence of a crime will be found.
Label: No Factor

Sentence 17: Sokolow, 109 S.Ct. at 1585.
Label: No Factor

Sentence 18: Nevertheless, "reasonable suspicion" must be more than an inchoate "hunch," and the fourth amendment accordingly requires that police articulate some minimal, objective justification for an investigatory stop.
Label: Suspicion Found

Sentence 19: Id.; Williams, 876 F.2d at 1524.
Label: No Factor

Sentence 20: In this case, the government asks us to accept the district court's conclusion that Officer Guthrie had reasonable suspicion to continue to detain and search the vehicle after he properly stopped it for speeding.
Label: Suspicion Found

Sentence 21: We simply cannot agree.
Label: No Factor

Sentence 22: It is true, as reiterated recently by the Supreme Court in Sokolow, that factors not in themselves proof of illicit conduct and/or quite consistent with innocent travel can, when taken together, give rise to a reasonable suspicion of criminal or drug activity.
Label: Suspicion Found

Sentence 23: 109 S.Ct. at 1596.
Label: No Factor

Sentence 24: Like the determination of probable cause discussed in Illinois v. Gates, the relevant inquiry in evaluating the presence of reasonable suspicion is “ ‘not whether particular conduct is “innocent” or “guilty,” but the degree of suspicion that attaches to particular types of noncriminal acts.’ ”
Label: Suspicion Found

Sentence 25: Sokolow, 109 S.Ct. at 1587 (quoting Gates, 462 U.S. 213, 243-44 n. 13, 103 S.Ct. 2317, 2334-35 n. 13, 76 L.Ed.2d 527 (1983)).
Label: No Factor

Sentence 26: Nevertheless, we find that the factors cited by the district court in this case, e.g. being Mexican, having few pieces of luggage, being visibly nervous or shaken during a confrontation with a state trooper, or traveling on the interstate with Texas license plates (not yet a crime in Alabama), do not provide a minimal, particularized basis for a conclusion of reasonable suspicion on the part of Officer Guthrie.
Label: Suspicion Not Found

Sentence 27: Even when considered together and in light of all the facts, such observations fail to suggest that appellant and his brother were engaged in any criminal activity other than speeding on the highway.
Label: No Factor

Sentence 28: Neither, for that matter, do any of the other allegedly “suspicious” facts urged by the government, such as Arturo Tapia’s looking away quickly as he passed the officer on the highway, the Tapias’ possessing valid San Antonio driver’s licenses, or the bare fact of the car being insured by a third party.
Label: No Factor

Sentence 29: See Brief for Appellee at 13.
Label: No Factor

Sentence 30: In United States v. Cortez, 449 U.S. 411, 418, 101 S.Ct. 690, 695, 66 L.Ed.2d 621 (1981), the Supreme Court observed that considering the totality of the circumstances in the course of evaluating the validity of a Terry stop is a process that “does not deal with hard certainties, but with probabilities.
Label: Suspicion Found

Sentence 31: Long before the law of probabilities was articulated as such, practical people formulated certain commonsense conclusions about human behavior; jurors as fact-finders are permitted to do the same — and so are law enforcement officers.”
Label: No Factor

Sentence 32: The corollary to such a statement, however, is that in formulating such common-sense conclusions, neither police officers nor courts should sanction as “reasonably suspicious” a combination of factors that could plausibly describe the behavior of a large portion of the motorists engaged in travel upon our interstate highways.
Label: Suspicion Not Found

Sentence 33: Because the record indicates no facts sufficient to justify the further investigatory detention of the Tapia brothers beyond a citation for speeding, the district court should have granted appellant’s motion to suppress.
Label: Suspicion Not Found

Sentence 34: Accordingly, the judgment of conviction is REVERSED.
Label: No Factor

Sentence 35: Guthrie testified that the vehicle was traveling at approximately 67 MPH in a 55 MPH zone, and that he followed it for approximately two miles before engaging his lights.
Label: No Factor

Sentence 36: This gave him probable cause to believe that the driver of the vehicle had violated an Alabama traffic law.
Label: No Factor

Sentence 37: At oral argument, counsel for appellant conceded that there was no real question regarding the legitimacy of Guthrie's motive in stopping the vehicle for speeding.
Label: No Factor

Sentence 38: This traffic stop, in other words, was not merely pretextual.
Label: No Factor

Sentence 39: See United States v. Hardy, 855 F.2d 753, 756 (11th Cir.1988), cert. denied, 489 U.s. 1019, 109 S.Ct. 1137, 103 L.Ed.2d 198 (1989) (proper inquiry for determining whether stop is pretextual is "`whether a reasonable officer would have made the seizure in the absence of illegitimate motivation\' ") (emphasis in original); United States v. Miller, 821 F.2d 546, 549 (11th Cir.1987) (same); United States v. Smith, 799 F.2d 704, 708 (11th Cir.1986) (same).
Label: No Factor

Sentence 40: The government argues that even if the search and seizure in this case went beyond Terry, and despite the invalidity of the consent, the admissibility of the evidence should be upheld under the good faith exception to the exclusionary rule, i.e. that the evidence was properly admitted because Officer Guthrie acted in good faith reliance on a reasonable belief that he had obtained valid consent to search.
Label: No Factor

Sentence 1: Whatever the merit of such a contention, the government neglected to raise it before the district court as an alternative ground, the court made no findings of fact as to the officer's good faith, and we therefore do not consider the issue here.
Label: No Factor

Sentence 2: The rationale has been extended and consistently applied to vehicle stops.
Label: No Factor

Sentence 3: United States v. Sharpe, 470 U.S. 675, 682, 105 S.Ct. 1568, 1573, 84 L.Ed.2d 605 (1985); United States v. Hensley, 469 U.S. 221, 226, 105 S.Ct. 675, 678, 83 L.Ed.2d 604 (1985); United States v. Williams, 876 F.2d 1521 (11th Cir.1989).
Label: No Factor

Sentence 4: Indeed, it seems apparent from the record that Officer Guthrie’s decision to detain the Tapias and search their vehicle after the initial traffic stop was predicated on the officer’s reliance on Arturo Tapia’s signing of the consent form, not a reasonable suspicion of criminal activity.
Label: No Factor

Sentence 5: Guthrie acknowledged as much on cross-examination, admitting that had Arturo Tapia not signed the consent form, Arturo and Bernardino Tapia “would have been released.” (R7-79A).
Label: No Factor

Sentence 6: As noted earlier, because the government does not dispute the district court’s finding of invalid consent, the only way Guthrie’s search could be vindicated is by determining a requisite level of suspicious behavior manifested by the Tapias to justify the investigative detention of their vehicle (which then generated probable cause) after it was stopped.
Label: No Factor

Sentence 7: See supra note 2 and accompanying text.
Label: No Factor

Sentence 8: We simply cannot discern a basis for such a finding on these facts.',
Label: No Factor

Sentence 9: Dissenting/Concuring: 'Not Available', Dissenting/Concuring 2: 'Not Available', Dissenting/Concuring 3: 'Not Available'
Label: No Factor

