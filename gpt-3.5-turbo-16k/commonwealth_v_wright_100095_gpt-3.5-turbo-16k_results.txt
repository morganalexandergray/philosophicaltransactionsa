Sentence 1: Case Name: 'Commonwealth vs.
Label: No Factor

Sentence 2: Christopher Wright',
Label: No Factor

Sentence 3: Citation: '85 Mass. App. Ct. 380', Court Name: 'Massachusetts Appeals Court',
Label: No Factor

Sentence 4: Decision Date YYYY-MM-DD: '2014-05-29',
Label: No Factor

Sentence 5: ID No. : 4228832, 'Brown, J.
Label: No Factor

Sentence 6: The defendant was convicted by a jury of trafficking in cocaine.
Label: Legal Indications of Drug Use

Sentence 7: On appeal, he challenges only the motion judge’s order denying his motion to suppress, contending that the State trooper exceeded the permissible scope of a routine traffic stop.
Label: No Factor

Sentence 8: We affirm.
Label: No Factor

Sentence 9: Background.
Label: No Factor

Sentence 10: We summarize the facts the motion judge found, supplemented with uncontested evidence from the motion hearing merely to provide context.
Label: No Factor

Sentence 11: See Commonwealth v. Johnson, 82 Mass. App. Ct. 336, 337 (2012).
Label: No Factor

Sentence 12: On September 20, 2011, Trooper Brendan Shugrue observed a grey Nissan following very closely behind a white Toyota.
Label: No Factor

Sentence 13: Shugrue followed the Nissan, and further observed that the vehicle had tinted windows and New Jersey license plates.
Label: Vehicle License Plate or Registration

Sentence 14: Shugrue pulled over the vehicle for following too closely.
Label: No Factor

Sentence 15: While at the side of the vehicle, Shugrue smelled a strong odor of air freshener.
Label: Masking Agent

Sentence 16: The defendant was driving, and Mitchell Degroat was a passenger.
Label: No Factor

Sentence 17: Shugrue explained why he had pulled over the vehicle and asked the defendant for his driver’s license.
Label: No Factor

Sentence 18: The defendant produced a New York license and stated that he and the passenger were traveling to Vermont to visit the defendant’s niece.
Label: No Factor

Sentence 19: Degroat professed to own the vehicle, but produced a New Jersey registration indicating that a leasing company was the owner.
Label: Unusual Vehicle Ownership

Sentence 20: When Shugrue asked Degroat for identification, he produced an expired, faceless New York driver’s permit.
Label: Motorist license or Identification

Sentence 21: Throughout this encounter, Degroat did not make eye contact with Shugrue.
Label: Nervous Behavior or Appearance

Sentence 22: Shugrue then returned to his cruiser to issue the defendant a written warning.
Label: No Factor

Sentence 23: Before completing the paperwork, he called for backup to watch the Nissan, as he could not see into the vehicle while sitting in his cruiser, due to the tinted windows on the Nissan.
Label: No Factor

Sentence 24: Trooper William Loiselle arrived about ten minutes later.
Label: No Factor

Sentence 25: While in his cruiser, Shugrue conducted a warrant check on Degroat and the defendant.
Label: No Factor

Sentence 26: He noticed that they lived in different boroughs of New York City.
Label: No Factor

Sentence 27: He also became aware of a thirty-one year age difference between them.
Label: No Factor

Sentence 28: The warrant check revealed extensive criminal histories of both occupants.
Label: No Factor

Sentence 29: Shugrue discovered that the defendant had convictions for illegal drug sales and possession of stolen firearms.
Label: Legal Indications of Drug Use

Sentence 30: Most notably, in 2010 the defendant had received a three-year sentence for a controlled substance offense in Vermont, for which, Shugrue concluded, he was probably on parole.
Label: Legal Indications of Drug Use

Sentence 31: Based on this information, and his observations at the side of the vehicle, Shugrue called the canine unit for assistance.
Label: No Factor

Sentence 32: Trooper Brian Gladu and his canine partner “Dash” arrived within twenty minutes.
Label: No Factor

Sentence 33: Upon Gladu’s arrival, Shugrue asked the defendant to exit the vehicle.
Label: No Factor

Sentence 34: The defendant complied, and consented to a patfrisk of his person, but because he did not own the vehicle, he would not consent to an automobile search.
Label: Refused Consent

Sentence 35: At that point, Gladu placed a drug collar on Dash and began to walk towards the vehicle.
Label: No Factor

Sentence 36: At the vehicle, Dash “alerted” aggressively at the driver’s door.
Label: Vehicle Contents Suggest Drugs

Sentence 37: Gladu then ordered Degroat out of the vehicle and allowed Dash to search the interior.
Label: No Factor

Sentence 38: Once inside the vehicle, Dash alerted to a black bag located on the back seat.
Label: Vehicle Contents Suggest Drugs

Sentence 39: Gladu opened the bag and discovered two bags of cocaine and one container of Inositol, a cutting agent.
Label: Vehicle Contents Suggest Drugs

Sentence 40: A subsequent search of the trunk uncovered a digital scale with white powder residue and several prescription bottles, all bearing the defendant’s name.
Label: Vehicle Contents Suggest Drugs

Sentence 1: Both the defendant and Degroat were arrested.
Label: No Factor

Sentence 2: The defendant moved to suppress the evidence seized during the traffic stop.
Label: No Factor

Sentence 3: He argued that the officer lacked reasonable suspicion to detain him, and that the search of the vehicle was impermissible.
Label: Suspicion Not Found

Sentence 4: The judge denied the motion, and the defendant was convicted of trafficking in cocaine.
Label: No Factor

Sentence 5: Discussion.
Label: No Factor

Sentence 6: In review of a decision on a motion to suppress, we accept, absent clear error, the motion judge’s subsidiary findings, but independently review his ultimate findings and conclusions of law.
Label: No Factor

Sentence 7: See Commonwealth v. Scott, 440 Mass. 642, 646 (2004).
Label: No Factor

Sentence 8: The defendant argues that, once he produced a valid license and registration, the officer’s inquiry should have ended.
Label: No Factor

Sentence 9: See Commonwealth v. Torres, 424 Mass. 153, 158 (1997) (“It is well settled that a police inquiry in a routine traffic stop must end on the production of a valid license and registration”).
Label: No Factor

Sentence 10: See also Commonwealth v. Ferrara, 376 Mass. 502, 505 (1978).
Label: No Factor

Sentence 11: The defendant’s argument misses the mark.
Label: No Factor

Sentence 12: This case is controlled in material respects by Commonwealth v. Feyenord, 445 Mass. 72, 77 (2005), cert, denied, 546 U.S. 1187 (2006).
Label: No Factor

Sentence 13: “In evaluating whether the police exceeded the permissible scope of a stop, the issue is one of proportion.”
Label: No Factor

Sentence 14: Ibid., quoting from Commonwealth v. Sinforoso, 434 Mass. 320, 323 (2001).
Label: No Factor

Sentence 15: In order to expand the threshold inquiry of a routine traffic stop, an officer must have a reasonable suspicion, based on specific and articulable facts, that further criminal conduct is afoot.
Label: No Factor

Sentence 16: See Commonwealth v. Feyenord, supra.
Label: No Factor

Sentence 17: See also Commonwealth v. Watts, 74 Mass. App. Ct. 514, 517 (2009); Commonwealth v. Lawson, 79 Mass. App. Ct. 322, 328 n.7 (2011).
Label: No Factor

Sentence 18: In this case, Shugrue conducted a threshold inquiry in which the defendant, a New York resident, produced a valid driver’s license, but the passenger, also a New York resident and purported owner of the vehicle, produced an expired, faceless New York driver’s permit and a New Jersey registration listing a third party as the owner of the Nissan.
Label: Unusual Vehicle Ownership

Sentence 19: This provided Shugrue a sufficient basis on which to investigate the occupants’ credentials.
Label: No Factor

Sentence 20: See Commonwealth v. Goewey, 452 Mass. 399, 407 (2008) (defendant-passenger’s production of an expired license bearing a photograph that did not resemble him “reasonably raised the officer’s suspicions”).
Label: No Factor

Sentence 21: Furthermore, the warrant check bolstered Shugrue’s suspicion.
Label: No Factor

Sentence 22: The fact that the defendant previously had been convicted of controlled substance offenses and illegal firearms possession, and was traveling to a jurisdiction where he was very likely on parole for a controlled substance violation, provided the officer with reasonable suspicion to believe that the defendant was involved in criminal activity.
Label: Legal Indications of Drug Use

Sentence 23: See Commonwealth v. Dasilva, 66 Mass. App. Ct. 556, 561 (2006) (“this court has allowed . . . knowledge of a person’s arrest record or unspecified ‘criminal conduct’ to be considered in a reasonable suspicion evaluation”).
Label: No Factor

Sentence 24: See also Commonwealth v. Watts, 74 Mass. App. Ct. at 519; Commonwealth v. Lawson, 79 Mass. App. Ct. at 328.
Label: No Factor

Sentence 25: While the reasons the officer gave, taken separately, may have been insufficient to support his reasonable suspicion, see, e.g., Commonwealth v. Cardoso, 46 Mass. App. Ct. 901, 901-902 (1998) (officer may not conduct patfrisk simply because nervous defendant was fidgeting and did not make eye contact), “[w]e view the facts and circumstances as a whole in assessing the reasonableness of the officer[’s] conduct.”
Label: No Factor

Sentence 26: Commonwealth v. Williams, 422 Mass. 111, 116 (1996).
Label: No Factor

Sentence 27: Given the occupants’ past narcotics convictions, the strong odor of air freshener, and being in a leased vehicle registered in a State where neither occupant resided, Shugrue was entitled to expand the scope of his investigation.
Label: Masking Agent, Unusual Vehicle Ownership

Sentence 28: See Commonwealth v. Fraser, 410 Mass. 541, 545 (1991) (“a combination of factors that are each innocent of themselves may, when taken together, amount to the requisite reasonable belief”); Commonwealth v. Robie, 51 Mass. App. Ct. 494, 497-498 (2001).
Label: No Factor

Sentence 29: Confronted with these facts, the officer could in accordance with proper police work permissibly use whatever resources were available to him to confirm or dispel his suspicion that the occupants were involved in drug activity.
Label: No Factor

Sentence 30: See Commonwealth v. Feyenord, supra at 80.
Label: No Factor

Sentence 31: “An expeditious collateral inquiry which might result in the suspect[’s] arrest or prompt release is not unreasonable when done to meet ‘the practical demands of effective criminal investigation and law enforcement.’ ”
Label: No Factor

Sentence 32: Ibid., quoting from Commonwealth v. Barros, 425 Mass. 572, 585 (1997).
Label: No Factor

Sentence 33: Furthermore, the duration of the stop was not prolonged or onerous.
Label: No Factor

Sentence 34: Shugrue promptly requested the canine, and the canine unit arrived less than thirty minutes after the initial stop.
Label: No Factor

Sentence 35: In total, the stop lasted about forty minutes.
Label: No Factor

Sentence 36: See Commonwealth v. Feyenord, supra at 81 & n.11; Commonwealth v. Watts, 74 Mass. App. Ct. at 519 n.5.
Label: No Factor

Sentence 37: In addition, the officer properly could have ordered the defendant (and Degroat) to exit the vehicle based on their criminal histories.
Label: No Factor

Sentence 38: See Commonwealth v. Rivera, 67 Mass. App. Ct. 362, 367 (2006) (police may take reasonable precautions for their own safety).
Label: No Factor

Sentence 39: We decline to address the Commonwealth’s argument that a permissible basis for the exit order was to avoid an inadvertent dog bite — albeit from an especially well-trained dog.
Label: No Factor

Sentence 40: There was “no causal relationship between [the exit] order” and the discovery of the cocaine, Commonwealth v. Lobo, 82 Mass. App. Ct. 803, 809 (2012), as the drugs were in the back seat.
Label: No Factor

Sentence 1: In any event, once Dash indicated the presence of drugs, the troopers had probable cause to search the vehicle.
Label: No Factor

Sentence 2: See Commonwealth v. Sinforoso, 434 Mass, at 324.
Label: No Factor

Sentence 3: Judgment affirmed.
Label: No Factor

Sentence 4: A second charge, for conspiracy to violate the drug laws, was nolle pressed.
Label: No Factor

Sentence 5: Degroat also had convictions for illegal drugs and weapons offenses.
Label: Legal Indications of Drug Use

Sentence 6: At that time, there were still two years remaining on the defendant’s Vermont sentence.
Label: No Factor

Sentence 7: We decline to address the propriety of Shugrue’s request that another officer monitor the suspects while he performed a records check, as that does not factor into the reasonable suspicion analysis at that juncture.
Label: No Factor

Sentence 8: In any event, Trooper Loiselle’s observations, if any, are immaterial, as the principal thrust of the defendant’s argument went to the delay precipitated by the call for the canine.
Label: No Factor

Sentence 9: We do not think that the large age gap between the occupants and the fact that they lived in two different boroughs within the same city, standing alone, would have provided sufficient basis to suspect criminal activity.
Label: No Factor

Sentence 10: Nor are tinted windows or air fresheners, each viewed independently, sufficient bases for reasonable suspicion.
Label: No Factor

Sentence 11: That is, the officer could use a step-by-step methodical investigative approach, not proceeding on a mere guess, hunch, or surmise.
Label: No Factor

Sentence 12: The propriety of the exit order was not raised or argued below.
Label: No Factor

Sentence 13: Dissenting/Concuring: 'Not Available', Dissenting/Concuring 2: 'Not Available', Dissenting/Concuring 3: 'Not Available'
Label: No Factor

