Sentence 1: Case Name: 'UNITED STATES of America, Plaintiff-Appellee, v. Daniel BINION, also known as Daniel Lucas, also known as Donald Lucas, also known as Donald Jackson, also known as Daniel J. Lucas, also known as Kenneth Jackson, also known as Terrell Lucas, also known as Frank, Defendant-Appellant'
Label: No Factor

Sentence 2: Citation: '570 F.3d 1034', Court Name: 'United States Court of Appeals for the Eighth Circuit'
Label: No Factor

Sentence 3: Decision Date YYYY-MM-DD: '2009-07-06'
Label: No Factor

Sentence 4: ID No. : 3665043, 'MURPHY, Circuit Judge.
Label: No Factor

Sentence 5: Daniel Binion was charged with two drug offenses involving crack cocaine and with conspiracy to commit money laundering.
Label: Legal Indications of Drug Use

Sentence 6: After the district court denied his motion to suppress, he entered conditional pleas of guilty and was sentenced to 400 months, He appeals the denial of his motion to suppress, and we affirm.
Label: No Factor

Sentence 7: At approximately 2 a.m. on August 1, 2006, Illinois State Police Sergeant Jeanette Beck pulled over a speeding car which was driven by Christopher Montgomery and occupied by two other men, including Daniel Binion.
Label: No Factor

Sentence 8: The car was traveling approximately 61 miles per hour in a 45 mile zone on Interstate 80 near Joliet, Illinois.
Label: No Factor

Sentence 9: As she stopped, the car, Beck observed Montgomery making what she considered to be furtive movements to hide something under his seat.
Label: Furtive Movement

Sentence 10: When Montgomery rolled down his window, a cloud of -smoke billowed out of the car smelling of burnt marijuana. .
Label: Vehicle Contents Suggest Drugs

Sentence 11: An electronic check of Montgomery’s driver license revealed an outstanding arrest warrant for possession of stolen property.
Label: Legal Indications of Drug Use

Sentence 12: Montgomery was arrested and placed in the state patrol car.
Label: No Factor

Sentence 13: Beck then asked Binion to get out of the stopped ear.
Label: No Factor

Sentence 14: She smelled burnt marijuana on him and observed that he was lethargic, extremely nervous, and shaky.
Label: Nervous Behavior or Appearance

Sentence 15: He was smoking a cigarette, which he refused to extinguish until ordered to do so several times.
Label: No Factor

Sentence 16: Beck placed Binion in handcuffs and conducted a protective frisk.
Label: No Factor

Sentence 17: She felt several bulges in his crotch area which she suspected were marijuana, but Binion claimed that the bulges were only part of his body.
Label: No Factor

Sentence 18: Beck laughed and asked Special Agent Ray Rodriguez, who had arrived on the scene as backup, to conduct a second frisk of Binion.
Label: No Factor

Sentence 19: After Rodriguez agreed that the bulges were likely marijuana, Bin-ion told the troopers that he had an ounce of marijuana in his pants.
Label: Vehicle Contents Suggest Drugs

Sentence 20: He was arrested and transported to a nearby state patrol headquarters.
Label: No Factor

Sentence 21: When Binion stepped out of the patrol car at headquarters a plastic bag of marijuana fell out of his pant leg.
Label: Vehicle Contents Suggest Drugs

Sentence 22: A full search revealed a bag of cocaine in his front pocket and a second bag of marijuana in the crotch area of his pants.
Label: Vehicle Contents Suggest Drugs

Sentence 23: Special Agent Rodriguez and Sergeant Tim Zych then read Binion the Illinois State Police Statement of Constitutional Rights, which included Miranda warnings.
Label: No Factor

Sentence 24: Binion responded that he understood his rights, but he declined to sign a waiver form.
Label: No Factor

Sentence 25: The troopers asked Binion if there was anything else he wanted to say, and he responded: “I’m booked, I’ll be back in 10 to 15 [years].
Label: No Factor

Sentence 26: Did you see what they took off me?”
Label: No Factor

Sentence 27: After this statement, the troopers asked Binion about his personal history in order to fill out an administrative form.
Label: No Factor

Sentence 28: He was generally uncooperative and fell asleep intermittently during the questioning.
Label: No Factor

Sentence 29: Binion was charged with conspiracy to distribute more than 50 grams of crack cocaine after having been previously convicted of two or more felony drug offenses, 21 U.S.C. §§ 841(a)(1), (b)(1)(A), 846 & 851; possession with intent to distribute more than 50 grams of crack cocaine after having two previous such convictions, id. §§ 841(a)(1), (b)(1)(A) & 851; and conspiracy to conduct financial transactions involving the proceeds of drug sales, 18 U.S.C. § 1956(a)(1)(A)®, (h).
Label: Legal Indications of Drug Use

Sentence 30: Binion moved to suppress the drug evidence, arguing that there was not probable cause for the traffic stop, that there was no reasonable suspicion to justify detaining and frisking him, and that the investigation was unduly prolonged.
Label: Suspicion Not Found

Sentence 31: He also contended that the troopers had questioned him after he invoked his privilege against self incrimination and that his post arrest statements should therefore be suppressed.
Label: No Factor

Sentence 32: United States Magistrate Judge Jon Scoles held an evidentiary hearing, and the district court adopted his findings and denied the motion to suppress.
Label: No Factor

Sentence 33: Pursuant to a plea agreement, Binion entered conditional guilty pleas to the two conspiracy counts in the indictment, reserving the right to appeal the denial of his pretrial motion.
Label: No Factor

Sentence 34: See Fed.R.Crim.P. 11(a)(2).
Label: No Factor

Sentence 35: On his appeal, Binion argues that the seizure of the drug evidence violated his Fourth Amendment right to be free from unreasonable searches and seizures because there was not probable cause to stop the car in which he was a passenger, no reasonable suspicion to detain him, and no officer safety concerns to justify frisking him.
Label: Suspicion Not Found

Sentence 36: He also contends that the permissible scope of his detention was exceeded and that his statements to the officers should have been suppressed.
Label: No Factor

Sentence 37: We review de novo the denial of a motion to suppress and review the district court’s underlying factual determinations for clear error.
Label: No Factor

Sentence 38: United States v. Banks, 553 F.3d 1101, 1104 (8th Cir.2009).
Label: No Factor

Sentence 39: We will reverse “only if the district court’s decision is unsupported by substantial evidence, based on an erroneous interpretation of applicable law, or, based on the entire record, it is clear a mistake was made.”
Label: No Factor

Sentence 40: United States v. Harper, 466 F.3d 634, 643 (8th Cir.2006) (quotation omitted).
Label: No Factor

Sentence 1: Although Binion asserts there was not probable cause for his traffic stop, he does not contest that the speed limit in the area was 45 miles per hour nor that Montgomery was driving in excess of that speed.
Label: No Factor

Sentence 2: Any traffic violation creates probable cause to stop a vehicle, and Beck had an objectively reasonable belief that Montgomery was speeding.
Label: No Factor

Sentence 3: See United States v. Sallis, 507 F.3d 646, 649 (8th Cir.2007).
Label: No Factor

Sentence 4: The district court found Beck’s explanation for why she stopped the car to be credible, and such assessments are “virtually unassailable on appeal.”
Label: No Factor

Sentence 5: United States v. Rodriguez, 414 F.3d 837, 845 (8th Cir.2005).
Label: No Factor

Sentence 6: Binion charges nevertheless that Beck’s explanation for why she stopped the car is not credible because she could not say on cross examination what percentage of Interstate 80 in Illinois has a speed limit of 65 miles per hour.
Label: No Factor

Sentence 7: That question is irrelevant to the issue of probable cause since the car was admittedly stopped in a 45 mile zone.
Label: No Factor

Sentence 8: Also of little effect were Bin-ion’s efforts to impeach Beck by arguing that she could not have observed the driver hiding something under the seat from her vantage point and that she failed to detect the crack cocaine in his front pocket when she frisked him.
Label: No Factor

Sentence 9: Binion further contends that Beck violated the Fourth Amendment by expanding her investigation beyond the scope of the traffic stop and detaining him.
Label: No Factor

Sentence 10: An officer may question a person if she has a reasonable, articulable suspicion that the person is engaged in criminal activity.
Label: No Factor

Sentence 11: See Terry v. Ohio, 392 U.S. 1, 21, 88 S.Ct. 1868, 20 L.Ed.2d 889 (1968); United States v. Long, 320 F.3d 795, 800 (8th Cir.2003) (investigative detention “can grow out of a traffic stop so long as the officer has reasonable suspicion to expand his investigation”).
Label: No Factor

Sentence 12: The officer must have a “particularized and objective basis for suspecting the particular person stopped of criminal activity” in light of all the circumstances from which “a trained officer draws inferences and makes deductions ... that might well elude an untrained person.”
Label: No Factor

Sentence 13: United States v. Cortez, 449 U.S. 411, 417-18, 101 S.Ct. 690, 66 L.Ed.2d 621 (1981).
Label: No Factor

Sentence 14: Beck, who had thirteen years of experience as a highway patrol officer, explained that she was suspicious that Binion was involved in criminal activity because of the strong odor of marijuana emanating from the car and his person, as well as his lethargy, nervousness, and shakiness.
Label: Nervous Behavior or Appearance, Legal Indications of Drug Use

Sentence 15: See United States v. Caves, 890 F.2d 87, 90 (8th Cir.1989) (smell of burnt marijuana created probable cause for vehicle search).
Label: Legal Indications of Drug Use

Sentence 16: Binion argues that the odor could be explained by the fact that he was sitting in a car in which others had been smoking and that Beck “had no baseline against which to evaluate [his] level of functioning.”
Label: No Factor

Sentence 17: Even if Binion’s individual actions “could be susceptible to innocent explanation, [his] behavior must be considered as a whole and in the light of the officers’ experience and specialized training.”
Label: No Factor

Sentence 18: United States v. Ameling, 328 F.3d 443, 448 (8th Cir.2003) (quotation omitted); see also United States v. Arvizu, 534 U.S. 266, 274, 122 S.Ct. 744, 151 L.Ed.2d 740 (2002) (rejecting “divide and conquer” analysis in which each suspicious observation is considered alone and found susceptible to innocent explanation).
Label: No Factor

Sentence 19: We conclude that Beck had a reasonable suspicion that Bin-ion was involved in criminal activity and was therefore justified in investigating .him.
Label: No Factor

Sentence 20: Binion also argues that Beck was not justified in conducting a protective frisk or “pat down.”
Label: No Factor

Sentence 21: Officers conducting investigative stops “may take steps reasonably necessary to protect their personal safety.”
Label: No Factor

Sentence 22: United States v. Stachowiak, 521 F.3d 852, 855 (8th Cir.2008) (quoting United States v. Shranklen, 315 F.3d 959, 961 (8th Cir.2003)).
Label: No Factor

Sentence 23: A protective frisk is warranted if “specific articulable facts taken together with rational inferences support the reasonable suspicion that a party was potentially armed and dangerous.”
Label: No Factor

Sentence 24: United States v. Ellis, 501 F.3d 958, 961 (8th Cir.2007) (quotation omitted).
Label: No Factor

Sentence 25: The question is an objective one: “whether a reasonably prudent man in the circumstances would be warranted in the belief that his safety or that of others was in danger.”
Label: No Factor

Sentence 26: Terry, 392 U.S. at 27, 88 S.Ct. 1868.
Label: No Factor

Sentence 27: Whether a frisk was supported by reasonable suspicion is a mixed question of law and fact which we review de novo.
Label: No Factor

Sentence 28: United States v. Roggeman, 279 F.3d 573, 577 (8th Cir.2002).
Label: No Factor

Sentence 29: From the facts she had observed, Beck could reasonably have suspected that drugs were being transported in the car.
Label: No Factor

Sentence 30: Someone in the car had recently been smoking marijuana, and the driver had been apparently trying to hide something under the front seat.
Label: No Factor

Sentence 31: The driver also had an outstanding warrant for his arrest and had been exceeding the speed limit at 2 a.m.
Label: No Factor

Sentence 32: An officer’s reasonable belief that someone is involved in drug dealing can support a suspicion that the person is armed since weapons are often present incident to the drug business.
Label: No Factor

Sentence 33: See United States v. Robinson, 119 F.3d 663, 667 (8th Cir.1997).
Label: No Factor

Sentence 34: By the time Binion was frisked, he had refused to cooperate by extinguishing his cigarette, see Stachowiak, 521 F.3d at 856-57, and he had reached for his back pocket after he was handcuffed, see Robinson, 119 F.3d at 667 (officer safety in doubt where suspect moved his hands towards his waist and appeared nervous).
Label: Furtive Movement, Nervous Behavior or Appearance

Sentence 35: Binion objects that Beck did not mention all of these factors in her police report or testimony, but the objective Terry standard does not require that an officer have verbalized all the reasons “justifying the search articulately, only that such reasons be articulable.”
Label: No Factor

Sentence 36: Roggeman, 279 F.3d at 583-84.
Label: No Factor

Sentence 37: Under the circumstances Beck’s suspicion that Binion might be armed was reasonable and the protective frisk therefore justified.
Label: No Factor

Sentence 38: If an officer detects apparent contraband during a valid protective frisk, the officer may seize the item.
Label: No Factor

Sentence 39: Minnesota v. Dickerson, 508 U.S. 366, 376-77, 113 S.Ct. 2130, 124 L.Ed.2d 334 (1993) (plain feel doctrine); see also Stachowiak, 521 F.3d at 855 (so long as the frisk is supported by an objectively reasonable belief that the suspect was dangerous, the fact that an officer finds drugs rather than a weapon does not require suppression of the drug evidence).
Label: No Factor

Sentence 40: Beck stated that she immediately suspected that the bulges in Binioris crotch were plastic bags of marijuana, but Binion contends that the bulges did not create probable cause because marijuana “would have been indistinguishable in a tactile sense from [his] genitalia.”
Label: No Factor

Sentence 1: Whether the bulges that Beck detected created probable cause to seize the contraband is irrelevant because nothing was seized from Binion until after his arrest.
Label: No Factor

Sentence 2: Binion’s admission to the troopers that he had an ounce of marijuana in his pants created probable cause for his arrest.
Label: Legal Indications of Drug Use

Sentence 3: When he arrived at the state patrol headquarters after his arrest, a bag of marijuana fell out of the leg of his pants and was seized as contraband in plain view.
Label: Vehicle Contents Suggest Drugs

Sentence 4: Two additional bags of drugs were seized when Binion was searched during booking after his arrest.
Label: Vehicle Contents Suggest Drugs

Sentence 5: See United States v. Davis, 457 F.3d 817, 823 (8th Cir.2006) (allowing use of drug evidence seized at police station after officer detected contraband during frisk, arrested suspect, and searched him incident to arrest).
Label: No Factor

Sentence 6: None of these seizures relied solely on what Beck felt inside Binioris pants, and we conclude they were all constitutional.
Label: No Factor

Sentence 7: Binion contends that his detention lasted longer than was necessary because the troopers transported him to headquarters rather than investigating further by the highway.
Label: No Factor

Sentence 8: While an investigative detention “must be temporary and last no longer than is necessary to effectuate the purpose of the stop,” Florida v. Royer, 460 U.S. 491, 500, 103 S.Ct. 1319, 75 L.Ed.2d 229 (1983), Binion had been arrested by the time the troopers transported him.
Label: No Factor

Sentence 9: His detention was then supported by probable cause so the requirement that the detention be minimally intrusive no longer applied.
Label: No Factor

Sentence 10: Moreover, it appears that the troopers acted diligently because only a half hour elapsed between the traffic stop and when he was taken into custody.
Label: No Factor

Sentence 11: We conclude that the district court did not err in denying his motion to suppress the physical evidence.
Label: No Factor

Sentence 12: Binion also moved to suppress the statements he made at the police station, arguing that they were obtained in violation of his Fifth Amendment privilege against self incrimination.
Label: No Factor

Sentence 13: Under Miranda v. Arizona, 384 U.S. 436, 444, 86 S.Ct. 1602, 16 L.Ed.2d 694 (1966), statements made by a custodial suspect in response to interrogation are inadmissible unless the suspect has voluntarily, knowingly, and intelligently waived his right against self incrimination.
Label: No Factor

Sentence 14: The district court found that Binion’s statements were voluntary rather than the result of interrogation and that he had not invoked his right to remain silent.
Label: No Factor

Sentence 15: We review de novo the legal conclusions underlying the denial of a motion to suppress on Fifth Amendment grounds, while the factual findings are reviewed for clear error.
Label: No Factor

Sentence 16: United States v. Aldaco, 477 F.3d 1008, 1013 (8th Cir.2007).
Label: No Factor

Sentence 17: After Binion was searched at headquarters, Sergeant Tim Zych and Special Agent Rodriguez explained his constitutional rights, including those required by Miranda.
Label: No Factor

Sentence 18: Binion stated that he understood those rights, but he refused to sign a waiver form.
Label: No Factor

Sentence 19: When he was asked whether he had anything else to say, he responded: “I’m booked, I’ll be back in 10 to 15 [years].
Label: No Factor

Sentence 20: Did you see what they took off me?”
Label: No Factor

Sentence 21: Binion argues that these statements are inadmissible because they were made in response to interrogation.
Label: No Factor

Sentence 22: Interrogation includes both express questioning and “words or actions that officers should know are reasonably likely to elicit an incriminating response.”
Label: No Factor

Sentence 23: Rhode Island v. Innis, 446 U.S. 291, 301, 100 S.Ct. 1682, 64 L.Ed.2d 297 (1980).
Label: No Factor

Sentence 24: Refusing to sign a written waiver of the privilege against self incrimination does not itself invoke that privilege and does not preclude a subsequent oral waiver.
Label: No Factor

Sentence 25: See United States v. House, 939 F.2d 659, 662 (8th Cir.1991) (citing North Carolina v. Butler, 441 U.S. 369, 99 S.Ct. 1755, 60 L.Ed.2d 286 (1979)); United States v. Zamarripa, 544 F.2d 978, 981 (8th Cir.1976).
Label: No Factor

Sentence 26: The troopers did not question Bin-ion about the evidence seized, the potential charges he faced, or any other matter reasonably likely to elicit an incriminating response.
Label: No Factor

Sentence 27: See United States v. Mendoza-Gonzalez, 363 F.3d 788, 795 (8th Cir.2004) (not interrogation to ask a detained person why he had requested to make a phone call).
Label: No Factor

Sentence 28: Since Binion had been informed of his rights and had neither invoked his Fifth Amendment privilege nor requested an attorney, his decision to volunteer an incriminating response was an intelligent waiver of that right.
Label: No Factor

Sentence 29: See House, 939 F.2d at 662 (waiver “may be inferred from the fact that the defendant responded to questions posed by the interviewer after being advised of his rights”); Aldaco, 477 F.3d at 1016 (Fifth Amendment does not bar a voluntary statement made by a suspect).
Label: No Factor

Sentence 30: We conclude that Binion’s statements were voluntary and therefore admissible under the Fifth Amendment and Miranda.
Label: No Factor

Sentence 31: Accordingly, we affirm the judgment of the district court.
Label: No Factor

Sentence 32: . The Honorable Linda R. Reade, Chief Judge, United States District Court for the Northern District of Iowa.',
Label: No Factor

Sentence 33: Dissenting/Concuring:  'Not Available',     Dissenting/Concuring 2:  'Not Available',     Dissenting/Concuring 3:  'Not Available'
Label: No Factor

