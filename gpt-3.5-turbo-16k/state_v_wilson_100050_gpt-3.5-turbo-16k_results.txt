Sentence 1: Case Name: 'STATE of Texas, Appellant v. Chris Fletcher WILSON, Appellee'
Label: No Factor

Sentence 2: Citation: '295 S.W.3d 759', Court Name: 'Texas Courts of Appeals'
Label: No Factor

Sentence 3: Decision Date YYYY-MM-DD: '2009-08-28'
Label: No Factor

Sentence 4: ID No. : 7300962, 'OPINION
Label: No Factor

Sentence 5: JIM R. WRIGHT, Chief Justice.
Label: No Factor

Sentence 6: A grand jury indicted Chris Fletcher Wilson for the offense of possession of methamphetamine.
Label: Legal Indications of Drug Use

Sentence 7: Wilson filed a motion to suppress evidence obtained by a search of his vehicle.
Label: No Factor

Sentence 8: After a hearing, the trial court granted Wilson’s motion to suppress evidence.
Label: No Factor

Sentence 9: The State appeals from that order.
Label: No Factor

Sentence 10: We affirm.
Label: No Factor

Sentence 11: In its sole issue on appeal, the State argues that the trial court erred when it granted the motion to suppress.
Label: No Factor

Sentence 12: We disagree.
Label: No Factor

Sentence 13: In reviewing a trial court’s ruling on a motion to suppress, appellate courts must give great deference to the trial court’s findings of historical facts as long as the record supports the findings.
Label: No Factor

Sentence 14: Torres v. State, 182 S.W.3d 899, 901 (Tex.Crim.App.2005); Guzman v. State, 955 S.W.2d 85, 87 (Tex.Crim.App.1997).
Label: No Factor

Sentence 15: Because the trial court is the exclusive fact-finder, the appellate court reviews evidence adduced at the suppression hearing in the light most favorable to the trial court’s ruling.
Label: No Factor

Sentence 16: Carmouche v. State, 10 S.W.3d 323, 327 (Tex.Crim.App.2000).
Label: No Factor

Sentence 17: We also give deference to the trial court’s rulings on mixed questions of law and fact when those rulings turn on an evaluation of credibility and demeanor.
Label: No Factor

Sentence 18: Guzman, 955 S.W.2d at 87.
Label: No Factor

Sentence 19: Where such rulings do not turn on an evaluation of credibility and demeanor, we review the trial court’s actions de novo.
Label: No Factor

Sentence 20: At the hearing on Wilson’s motion to suppress, Officer Matthew Scurry with the Cisco Police Department testified that on April 29, 2007, he stopped appellant for speeding on Interstate 20.
Label: No Factor

Sentence 21: Officer Scurry said that his radar indicated Wilson was driving his vehicle at 81 miles per hour in a 65 mile-per-hour zone; however, Wilson accelerated to 90 miles per hour as Officer Scurry followed him.
Label: No Factor

Sentence 22: Officer Scurry followed Wilson for five miles before making the stop.
Label: No Factor

Sentence 23: Officer Scurry acknowledged that he did not activate the light bar on his police car when he began following Wilson and that Wilson stopped immediately after Officer Scurry activated the light bar.
Label: No Factor

Sentence 24: Officer Scurry testified that he approached Wilson and asked for his driver’s license and proof of insurance.
Label: Motorist license or Identification

Sentence 25: Wilson told Officer Scurry that he was on parole for a drug violation.
Label: Legal Indications of Drug Use

Sentence 26: Wilson gave Officer Scurry his driver’s license but was unable to locate his proof of insurance.
Label: Motorist license or Identification

Sentence 27: Officer Scurry went to his car to run a driver’s license check on Wilson.
Label: No Factor

Sentence 28: When he did not get a response to his request for a driver’s license check, Officer Scurry made a second request to dispatch for a return on Wilson’s driver’s license.
Label: No Factor

Sentence 29: Sometime during the stop, Wilson located his proof-of-insurance card and voluntarily left his vehicle to give the card to Officer Scurry.
Label: No Factor

Sentence 30: Officer Scurry instructed Wilson to remain in a certain spot on the side of the road.
Label: No Factor

Sentence 31: However, Wilson would not stay in that spot.
Label: No Factor

Sentence 32: Instead, he moved around and was “fidgeting.”
Label: Furtive Movement

Sentence 33: While waiting for a return on the driver’s license check, Officer Scurry approached Wilson again and asked for consent to search Wilson’s vehicle.
Label: Refused Consent

Sentence 34: Officer Scurry testified that Wilson became “tongue-tied” and started stuttering.
Label: Suspicious or Inconsistent Answers

Sentence 35: Wilson gave reasons for not wanting Officer Scurry to search the vehicle and denied consent to search.
Label: Refused Consent, Suspicious or Inconsistent Answers

Sentence 36: Officer Scurry had still not received a criminal history for Wilson at the time he requested consent to search Wilson’s vehicle.
Label: No Factor

Sentence 37: Officer Scurry conducted a pat-down search of Wilson and had him stand in the borrow ditch.
Label: No Factor

Sentence 38: Officer Scurry then conducted a canine search on Wilson’s vehicle.
Label: No Factor

Sentence 39: On the second time around Wilson’s vehicle, the canine alerted on the front door of the vehicle, and illegal drugs were found in the vehicle.
Label: Vehicle Contents Suggest Drugs

Sentence 40: Thirteen minutes elapsed from the time of the initial stop until the canine search began.
Label: No Factor

Sentence 1: A traffic stop is a detention and must be reasonable under the United States and Texas Constitutions.
Label: No Factor

Sentence 2: See Davis v. State, 947 S.W.2d 240, 245 (Tex.Crim.App.1997); Caraway v. State, 255 S.W.3d 302, 307 (Tex.App.-Eastland 2008, no pet.).
Label: No Factor

Sentence 3: To be reasonable, a traffic stop must be temporary and last no longer than is necessary to effectuate the purpose of the stop.
Label: No Factor

Sentence 4: Florida v. Royer, 460 U.S. 491, 500, 103 S.Ct. 1319, 75 L.Ed.2d 229 (1983); Davis, 947 S.W.2d at 245.
Label: No Factor

Sentence 5: Reasonableness is measured in objective terms by examining the totality of the circumstances.
Label: No Factor

Sentence 6: Ohio v. Robinette, 519 U.S. 33, 39, 117 S.Ct. 417, 136 L.Ed.2d 347 (1996); Spight v. State, 76 S.W.3d 761, 765 (Tex.App.-Houston [1st Dist.] 2002, no pet.)..
Label: No Factor

Sentence 7: An officer may check for outstanding warrants and demand identification, a valid driver’s license, and proof of insurance from the driver.
Label: Motorist license or Identification

Sentence 8: Kothe v. State, 152 S.W.3d 54, 63 (Tex.Crim.App.2004); Davis, 947 S.W.2d at 245 n. 6; Caraway, 255 S.W.3d at 308.
Label: No Factor

Sentence 9: While an officer is awaiting a computer warrant check, questioning about matters unrelated to the initial traffic stop does not violate the Fourth Amendment because such questioning does not extend the duration of an initial valid stop.
Label: No Factor

Sentence 10: Caraway, 255 S.W.3d at 308.
Label: No Factor

Sentence 11: In some circumstances, however, extensive questioning about unrelated matters may exceed the scope of the initial stop.
Label: No Factor

Sentence 12: When the reason for the stop has been satisfied, the stop may not be used as a “fishing expedition for unrelated criminal activity.”
Label: No Factor

Sentence 13: Davis, 947 S.W.2d at 243 (quoting Robinette, 519 U.S. at 41, 117 S.Ct. 417 (Ginsburg, J., concurring)); Caraway, 255 S.W.3d at 308.
Label: No Factor

Sentence 14: Once an officer concludes the investigation of the conduct that initiated the stop, continued detention of a person is permitted only if there is reasonable suspicion to believe another offense has been or is being committed.
Label: Suspicion Found

Sentence 15: Davis, 947 S.W.2d at 245; Caraway, 255 S.W.3d at 308.
Label: Suspicion Found

Sentence 16: After the purpose of a traffic stop has been accomplished, a police officer may ask for consent to search a vehicle; however, if consent is refused, the officer may not detain the occupants or vehicle further unless reasonable suspicion of some criminal activity exists.
Label: Refused Consent

Sentence 17: Caraway, 255 S.W.3d at 310-11; Magana v. State, 177 S.W.3d 670, 673 (Tex.App.-Houston [1st Dist.] 2005, no pet.); Spight, 76 S.W.3d at 767-68.
Label: No Factor

Sentence 18: The record shows that, after the purpose of the traffic stop was accomplished, Officer Scurry “patted” down Wilson and conducted a canine search of Wilson’s vehicle.
Label: No Factor

Sentence 19: Wilson did not consent to the search; therefore, reasonable suspicion of criminal activity was required to conduct the search.
Label: Refused Consent

Sentence 20: In addition to the officer’s testimony, the trial court also reviewed the recording made on the dash-cam recorder in the officer’s vehicle.
Label: No Factor

Sentence 21: The trial court found that “the Officer testified that the only reasons he had to prolong the initial detention was that he felt that [Wilson] exhibited nervousness and that [Wilson] refused to give the Officer consent to search his vehicle.”
Label: Nervous Behavior or Appearance, Refused Consent

Sentence 22: Nervous behavior is a pertinent factor in determining reasonable suspicion, but nervousness alone is not sufficient to provide reasonable suspicion.
Label: Nervous Behavior or Appearance

Sentence 23: Green v. State, 256 S.W.3d 456, 462 (Tex.App.-Waco 2008, no pet.); LeBlanc v. State, 138 S.W.3d 603, 608 n. 6 (Tex.App.Houston [14th Dist.] 2004, no pet.).
Label: No Factor

Sentence 24: The trial court further found that Officer Scurry did not testify to any specific articulable facts providing reasonable suspicion to prolong the initial detention of Wilson.
Label: No Factor

Sentence 25: Giving due deference to the trial court’s findings and applying the law to those findings and after reviewing the record including our own review of the dash-cam recording, we find that it has not been shown that the trial court abused its discretion when it granted Wilson’s motion to suppress.
Label: No Factor

Sentence 26: The State’s sole issue on appeal is overruled.
Label: No Factor

Sentence 27: The judgment of the trial court is affirmed.
Label: No Factor

Sentence 28: Dissenting/Concuring: 'Not Available', Dissenting/Concuring 2: 'Not Available', Dissenting/Concuring 3: 'Not Available'
Label: No Factor

